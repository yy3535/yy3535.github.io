import{_ as c,r as i,o as u,c as r,b as n,e as a,w as t,d as s,a as o}from"./app-E-cEvfoH.js";const d={},k=n("h1",{id:"js-web-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js-web-api","aria-hidden":"true"},"#"),s(" JS-WEB-API")],-1),v={class:"table-of-contents"},m=n("h2",{id:"dom操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dom操作","aria-hidden":"true"},"#"),s(" DOM操作")],-1),g=n("ul",null,[n("li",null,"DOM操作出来nodeList是类数组")],-1),b=o(`<h3 id="node" tabindex="-1"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h3><ul><li>节点属性 <ul><li>nodeName</li><li>nodeType(括号中为Node常量) <ul><li>1（Node.Element_Node）</li><li>3（Node.Text_Node）</li><li>8（Node.COMMENT_NODE）</li><li>9（Node.Document_Node）</li><li>11（Node.DocumentFragment_Node）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> Node<span class="token punctuation">.</span><span class="token constant">DOCUMENT_NODE</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>nodeValue</li><li>textContent <ul><li>document:null</li><li>comment/text node:text inside the node(即nodeValue)</li><li>其它:每个child node的textContent连接。</li></ul></li></ul></li><li>节点关系 <ul><li>childNodes <ul><li>返回包含指定节点的子节点的集合，该集合为即时更新的集合，NodeList,是个类数组</li></ul></li><li>parentNode</li><li>parentElement</li><li>firstChild <ul><li>如果有一个子节点, childNode 是节点的第一个子节点的引用，否则为null。</li></ul></li><li>lastChild</li><li>hasChildNodes</li><li>previousSibling <ul><li>返回当前节点的前一个兄弟节点,没有则返回null.</li></ul></li><li>nextSibling <ul><li>返回其父节点的 childNodes 列表中紧跟在其后面的节点，如果指定的节点为最后一个节点，则返回 null。</li></ul></li></ul></li><li>方法 <ul><li>appendChild <ul><li>将一个节点添加到指定父节点的子节点列表末尾。</li></ul></li><li>removeChild</li><li>insertBefore <ul><li>var insertedNode = parentNode.insertBefore(newNode, referenceNode);</li><li>函数返回被插入过的子节点；当 newNode 是 DocumentFragment 时，返回空 DocumentFragment。</li></ul></li><li>replaceChild</li><li>cloneNode</li><li>contains <ul><li>Returns a Boolean value indicating whether a node is a descendant of a given node or not.</li></ul></li></ul></li></ul><h3 id="document" tabindex="-1"><a class="header-anchor" href="#document" aria-hidden="true">#</a> Document</h3><ul><li><p>继承自Node和EventTarget</p></li><li><p>DOM 树</p><ul><li>DOM 树包含了像 <code>&lt;body&gt;</code> 、<code>&lt;table&gt;</code> 这样的元素，以及大量其他元素。</li></ul></li></ul>`,4),h=o(`<li><p>Properties</p><ul><li><p>Document.documentElement</p><ul><li>返回当前文档的直接子节点，一般是<code>&lt;html&gt;</code>元素</li></ul></li><li><p>Document.body</p><ul><li>返回当前文档的 <code>&lt;body&gt;</code> 或 <code>&lt;frameset&gt;</code> 节点。</li></ul></li><li><p>Document.head</p><ul><li>返回当前文档的<code>&lt;head&gt;</code>元素</li></ul></li><li><p>Document.title</p><ul><li>获取和设置当前文档的标题</li></ul></li><li><p>Document.forms</p><ul><li>返回一个包含当前文档中所有表单元素<code>&lt;form&gt;</code>的列表</li></ul></li><li><p>Document.domain</p><ul><li>获取或设置当前文档的域名</li></ul></li><li><p>Document.doctype</p></li><li><p>Document.location</p><ul><li>返回当前文档的URI</li></ul></li><li><p>Document.documentURI</p><ul><li>返回当前文档的路径</li></ul></li><li><p>Document.referrer</p><ul><li>返回来源页面的URI</li></ul></li><li><p>Document.URL</p><ul><li>以字符串形式返回文档的地址栏链接</li></ul></li><li><p>Document.cookie</p><ul><li>返回一个使用分号分隔的cookie列表，或者设置（写入）一个cookie</li><li>以字符串的方式返回所有的 cookie，类型格式： cookie1=value; cookie2=value; cookie3=value;</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>cookie<span class="token operator">=</span><span class="token string">&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token parameter">cname<span class="token punctuation">,</span>cvalue<span class="token punctuation">,</span>exdays</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    d<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>exdays<span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> expires <span class="token operator">=</span> <span class="token string">&quot;expires=&quot;</span><span class="token operator">+</span>d<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> cname <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> cvalue <span class="token operator">+</span> <span class="token string">&quot;; &quot;</span> <span class="token operator">+</span> expires<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token parameter">cname</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> cname <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> ca <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>ca<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        <span class="token keyword">var</span> c <span class="token operator">=</span> ca<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>length<span class="token punctuation">,</span>c<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">checkCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> user<span class="token operator">=</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">!=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎 &quot;</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">&quot; 再次访问&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        user <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的名字:&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token operator">!=</span><span class="token string">&quot;&quot;</span> <span class="token operator">&amp;&amp;</span> user<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>user<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Document.readyState</p><ul><li>返回当前文档的加载状态</li></ul></li></ul></li><li><p>Methods</p><ul><li>Document.createElement()</li><li>Document.getElementsByClassName()</li><li>Document.getElementsByTagName()</li><li>document.getElementById()</li><li>document.querySelector()</li><li>document.querySelectorAll()</li><li>Document.createDocumentFragment() <ul><li>创建一个 new document fragment.</li></ul></li></ul></li>`,2),f=n("p",null,"Events",-1),y=n("li",null,"visibilitychange",-1),x=o("<li>Animation events <ul><li>animationend</li></ul></li><li>Clipboard events <ul><li>copy</li><li>cut</li><li>paste</li></ul></li><li>Drag &amp; drop events <ul><li>drag</li><li>dragend</li><li>dragenter</li><li>dragexit</li><li>dragleave</li><li>dragover</li><li>dragstart</li><li>drop</li></ul></li><li>Fullscreen events <ul><li>fullscreenchange</li><li>fullscreenerror</li></ul></li>",4),q=o("<li>Pointer events</li><li>Selection events <ul><li>selectionchange</li><li>selectstart</li></ul></li><li>Touch events <ul><li>touchcancel</li><li>touchend</li><li>touchmove</li><li>touchstart</li></ul></li><li>Transition events <ul><li>transitioncancel</li><li>transitioned</li><li>transitionrun</li><li>transitionstart</li></ul></li>",4),w=n("h3",{id:"element",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#element","aria-hidden":"true"},"#"),s(" Element")],-1),_=o('<ul><li>继承自Node和EventTarget <ul><li>nodeType:1</li><li>nodeName:标签名</li><li>nodeValue:null</li><li>parentNode:可能是Document或Element</li></ul></li><li>Properties <ul><li><p>tagName:同nodeName</p></li><li><p>id</p></li><li><p>name</p></li><li><p>className</p></li><li><p>classList</p></li><li><p>attributes</p><ul><li>返回该元素所有属性节点的一个实时集合。该集合是一个 NamedNodeMap 对象，不是一个数组，所以它没有 数组 的方法。attributes 是字符串形式的名/值对，每一对名/值对对应一个属性节点。(类数组，有length属性)。每个属性有name和value</li></ul></li><li><p>value</p><ul><li>值</li></ul></li><li><p>innerHTML</p></li><li><p>innerText</p></li><li><p>children</p><ul><li>返回 一个Node的子elements ，是一个动态更新的 HTMLCollection。</li></ul></li><li><p>firstElementChild</p></li><li><p>lastElementChild</p></li><li><p>clientWidth</p></li><li><p>clientHeight</p></li><li><p>clientTop</p></li><li><p>clientLeft</p></li><li><p>scrollWidth</p></li><li><p>scrollHeight</p></li><li><p>scrollTop</p><!-- ![scrollTop](../../img/scrollTop.png) --></li><li><p>scrollLeft</p><!-- ![scrollHeight](../../img/scrollHeight.png) --></li></ul></li><li>Methods <ul><li>getElementsByClassName()</li><li>getElementsByTagName()</li><li>querySelector()</li><li>querySelectorAll()</li><li>append()</li><li>getAttribute()</li><li>setAttribute()</li><li>hasAttribute()</li><li>hasAttributes()</li><li>scroll()</li><li>scrollTo()</li><li>scrollBy()</li><li>matches(selectorString) <ul><li>返回true/false,元素是否符合选择器</li><li>参数为css选择器字符串</li></ul></li><li>getBoundingClientRect() <ul><li>方法返回元素的大小及其相对于视口的位置。</li></ul></li><li>getClientRects() <ul><li>方法返回一个指向客户端中每一个盒子的边界矩形的矩形集合。</li></ul></li></ul></li></ul><p>语法</p><ul><li>Events <ul><li><p>click</p></li><li><p>dbclick</p></li><li><p>contextmenu</p></li><li><p>mousedown</p></li><li><p>mouseup</p></li><li><p>mouseenter</p></li><li><p>mouseleave</p></li><li><p>mouseout</p></li><li><p>mousemove</p></li><li><p>mouseover</p></li><li><p>focus</p></li><li><p>focusin</p></li><li><p>focusout</p></li><li><p>blur</p></li><li><p>keyup</p></li><li><p>keydown</p></li><li><p>keypress</p></li><li><p>select</p></li><li><p>copy</p></li><li><p>paste</p></li><li><p>fullscreenchange</p></li><li><p>fullscreenerror</p></li><li><p>touchstart</p></li><li><p>touchcancel</p></li></ul></li></ul><h4 id="htmlelement" tabindex="-1"><a class="header-anchor" href="#htmlelement" aria-hidden="true">#</a> HTMLElement</h4><ul><li>Properties <ul><li>style <ul><li>通过单独的样式属性（如elt.style.color = &#39;...&#39;）比用elt.style.cssText = &#39;...&#39; 或者 elt.setAttribute(&#39;style&#39;, &#39;...&#39;)形式更加简便</li></ul></li></ul></li></ul><h4 id="svgelement" tabindex="-1"><a class="header-anchor" href="#svgelement" aria-hidden="true">#</a> SVGElement</h4><h3 id="eventtarget" tabindex="-1"><a class="header-anchor" href="#eventtarget" aria-hidden="true">#</a> EventTarget</h3><ul><li>Element,Document,Window以及XMLHttpRequest,AudioNode,AudioContext等继承了EventTarget</li><li>Event也可以通过onevent的properties和attributes来设置</li><li>Constructor <ul><li>EventTarget() <ul><li>创建一个EventTarget实例</li></ul></li></ul></li></ul>',8),j=n("ul",null,[n("li",null,[s("Methods "),n("ul",null,[n("li",null,"EventTarget.addEventListener()"),n("li",null,"EventTarget.removeEventListener()"),n("li",null,"EventTarget.dispatchEvent()")])])],-1),T=n("h3",{id:"text",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#text","aria-hidden":"true"},"#"),s(" Text")],-1),E=o("<li>nodeName:&quot;#text&quot;</li><li>nodeValue:节点所包含的文本</li><li>parentNode:一个Element</li><li>不支持（没有）子节点</li><li>Properties <ul><li>data <ul><li>节点所包含的文本</li></ul></li><li>length</li></ul></li><li>Methods <ul><li>appendData(text) <ul><li>将text添加到节点末尾</li></ul></li><li>deleteData(offset,count) <ul><li>从offset指定的位置开始删除count个字符</li></ul></li><li>insertData(offset,text) <ul><li>在offset指定的位置插入text</li></ul></li><li>replaceData(offset,count,text) <ul><li>用text替换从offset指定的位置开始到offset+count为止处的文本</li></ul></li><li>splitText(offset) <ul><li>从offset指定的位置将当前文本节点分成两个文本节点</li></ul></li><li>substringData(offset,count) <ul><li>提取从offset指定的位置开始到offset+count为止处的字符串</li></ul></li></ul></li>",6),S=n("h3",{id:"documentfragment",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#documentfragment","aria-hidden":"true"},"#"),s(" DocumentFragment")],-1),D=o("<li><p>nodeName值为&quot;#document-fragment&quot;</p></li><li><p>nodeValue值为null</p></li><li><p>parentNode值为null</p></li><li><p>子节点可以是Element,Text等</p></li><li><p>文档片段接口，表示一个没有父级文件的最小文档对象。</p></li><li><p>被作为一个轻量版的 Document 使用，用于存储已排好版的或尚未打理好格式的XML片段。</p></li><li><p>最大的区别是因为 DocumentFragment 不是真实DOM树的一部分，它的变化不会触发 DOM 树的（重新渲染) ，且不会导致性能等问题。</p></li>",7),N=n("h3",{id:"window",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#window","aria-hidden":"true"},"#"),s(" Window")],-1),C={id:"window事件",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#window事件","aria-hidden":"true"},"#",-1),M=o(`<p>|属性| 描述 | | :------| ------: | :------: | onload |一张页面或一幅图像完成加载。 | onbeforeunload| 该事件在即将离开页面（刷新或关闭）时触发| onunload| 用户退出页面。| onpageshow| 该事件在用户访问页面时触发 | onpagehide| 该事件在用户离开当前网页跳转到另外一个页面时触发 | onerror |在加载文档或图像时发生错误。| onabort|图像的加载被中断。| onhashchange| 该事件在当前 URL 的锚部分发生修改时触发。 | onresize| 窗口或框架被重新调整大小。 | onscroll| 当文档被滚动时发生的事件。 |</p><h4 id="window方法" tabindex="-1"><a class="header-anchor" href="#window方法" aria-hidden="true">#</a> Window方法</h4><ul><li>setTimeout</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> timeoutID <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">[</span><span class="token punctuation">,</span> delay<span class="token punctuation">,</span> param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// param1, ..., paramN 附加参数，一旦定时器到期，它们会作为参数传递给function </span>
<span class="token keyword">var</span> timeoutID <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">[</span><span class="token punctuation">,</span> delay<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> timeoutID <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>code<span class="token punctuation">[</span><span class="token punctuation">,</span> delay<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>getComputedStyle <ul><li>返回的style是一个实时的 CSSStyleDeclaration 对象，当元素的样式更改时，它会自动更新本身。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> style <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token punctuation">[</span>pseudoElt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>element <ul><li>用于获取计算样式的Element。</li></ul></li><li>pseudoElt 可选 <ul><li>指定一个要匹配的伪元素的字符串。必须对普通元素省略（或null）。</li></ul></li></ul><h4 id="window属性" tabindex="-1"><a class="header-anchor" href="#window属性" aria-hidden="true">#</a> Window属性</h4><ul><li>innerWidth <ul><li>浏览器视口（viewport）宽度（单位：像素），如果存在垂直滚动条则包括它。</li></ul></li><li>innerHeight <ul><li>浏览器窗口的视口（viewport）高度（以像素为单位）；如果有水平滚动条，也包括滚动条高度。</li><li>requestAnimationFrame <ul><li>告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="dom事件" tabindex="-1"><a class="header-anchor" href="#dom事件" aria-hidden="true">#</a> DOM事件</h3>`,10),A=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"级别"),n("th",{style:{"text-align":"left"}},"格式")])],-1),L=n("tr",null,[n("td",{style:{"text-align":"left"}},"DOM0"),n("td",{style:{"text-align":"left"}},"element.onclick=function(){}")],-1),H=n("td",{style:{"text-align":"left"}},"DOM2",-1),P={style:{"text-align":"left"}},I=n("tr",null,[n("td",{style:{"text-align":"left"}},"DOM3"),n("td",{style:{"text-align":"left"}},"element.addEventListener('keyup',function(){},false)(事件类型较DOM2增加了很多)")],-1),R=n("li",null,[s("DOM事件模型 "),n("ul",null,[n("li",null,"冒泡(从下往上)"),n("li",null,"捕获(从上往下)")])],-1),B=n("li",null,[s("DOM事件流 "),n("ul",null,[n("li",null,"比如点击了左键，左键是怎么传到页面上，就叫事件流"),n("li",null,"一个事件流分三个阶段：捕获阶段->目标阶段->冒泡阶段。事件通过捕获到达目标阶段，再从目标阶段冒泡上传到window对象")])],-1),$=o(`<ul><li>事件绑定具体流程 <ul><li>事件捕获：window-&gt;document-&gt;html-&gt;body-&gt;...-&gt;目标元素</li><li>冒泡流程：目标元素-&gt;...-&gt;boyd-&gt;html-&gt;document-&gt;window</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>target<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
target<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> useCapture<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),U=n("li",null,[s("options 可选 "),n("ul",null,[n("li",null,"一个指定有关 listener 属性的可选参数对象。可用的选项如下："),n("li",null,"capture: Boolean，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发。"),n("li",null,"once: Boolean，表示 listener 在添加之后最多只调用一次。如果是 true， listener 会在其被调用之后自动移除。"),n("li",null,"passive: Boolean，设置为true时，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。")])],-1),X=n("ul",null,[n("li",null,[s("事件类型 "),n("ul",null,[n("li",null,"CAPTURING-PHASE 当前事件阶段为捕获阶段"),n("li",null,"AT-TARGET 当前事件是目标阶段,在评估目标事件"),n("li",null,"BUBBLING-PHASE 当前的事件为冒泡阶段")])])],-1),W=n("p",null,"Event属性",-1),J=o("<ul><li>altKey <ul><li>返回当事件被触发时，&quot;ALT&quot; 是否被按下。</li></ul></li><li>ctrlKey <ul><li>返回当事件被触发时，&quot;CTRL&quot; 键是否被按下。</li></ul></li><li>shiftKey <ul><li>返回当事件被触发时，&quot;SHIFT&quot; 键是否被按下。</li></ul></li><li>charCode <ul><li>返回onkeypress事件触发键值的字母代码。</li></ul></li><li>key <ul><li>在按下按键时返回按键的标识符。</li></ul></li><li>button <ul><li>返回当事件被触发时，哪个鼠标按钮被点击。</li></ul></li><li>keyCode <ul><li>返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码。</li></ul></li></ul>",1),z=n("ul",null,[n("li",null,"clientX 返回当事件被触发时，鼠标指针的水平坐标。"),n("li",null,"clientY 返回当事件被触发时，鼠标指针的垂直坐标。"),n("li",null,"screenX 返回当某个事件被触发时，鼠标指针的水平坐标。"),n("li",null,"screenY 返回当某个事件被触发时，鼠标指针的垂直坐标。")],-1),G=n("ul",null,[n("li",null,"preventDefault() 阻止默认行为(比如阻止链接默认跳转行为)"),n("li",null,"stopPropagation() 阻止捕获和冒泡阶段中当前事件的进一步传播。"),n("li",null,"stopImmediatePropagation() 优先级(绑定了ab两个事件，a事件中写了此函数，那么b就不会执行)")],-1),F=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 声明</span>
<span class="token keyword">var</span> eve<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&#39;custome&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ev<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;custome&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 触发</span>
ev<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>eve<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),V=o(`<h4 id="事件冒泡" tabindex="-1"><a class="header-anchor" href="#事件冒泡" aria-hidden="true">#</a> 事件冒泡</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>激活<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p5<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p6<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;p1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body
<span class="token function">bindEvent</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 注释掉这一行，来体会事件冒泡</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;激活&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">bindEvent</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;取消&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="事件委托-代理" tabindex="-1"><a class="header-anchor" href="#事件委托-代理" aria-hidden="true">#</a> 事件委托/代理</h4><ul><li>使用 <ul><li>e.target // 目标DOM节点</li></ul></li></ul>`,5),K=n("ul",null,[n("li",null,"利用事件冒泡的机制，只需要绑定一个父元素的事件，就可以监听所有子元素的事件并绑定。"),n("li",null,"解决了动态添加的元素绑定事件的问题"),n("li",null,"代码简洁，减少浏览器的内存占用")],-1),Y=o(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 例 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>a1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>a2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>a3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>a4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>点击增加一个 a 标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- &lt;script&gt;
    var div1 = document.getElementById(&#39;div1&#39;)
    div1.addEventListener(&#39;click&#39;, function (e) {
        var target = e.target
        if (target.nodeName === &#39;A&#39;) {
            alert(target.innerHTML)
        }
    })
&lt;/script&gt; --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通用事件绑定函数</span>
<span class="token keyword">function</span> <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> type<span class="token punctuation">,</span> selector<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fn <span class="token operator">=</span> selector
        selector <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
    elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> target
        <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            target <span class="token operator">=</span> e<span class="token punctuation">.</span>target
            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用代理</span>
<span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;div1&#39;</span><span class="token punctuation">)</span>
<span class="token function">bindEvent</span><span class="token punctuation">(</span>div1<span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 不使用代理</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;a1&#39;</span><span class="token punctuation">)</span>
<span class="token function">bindEvent</span><span class="token punctuation">(</span>div1<span class="token punctuation">,</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bom操作" tabindex="-1"><a class="header-anchor" href="#bom操作" aria-hidden="true">#</a> BOM操作</h2><ul><li>BOM（浏览器对象模型） <ul><li>navigator</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// navigator</span>
  <span class="token keyword">var</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent
  <span class="token keyword">var</span> isChrome <span class="token operator">=</span> ua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;Chrome&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isChrome<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>screen <ul><li>screen.width</li><li>screen.height</li></ul></li><li>location<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
url<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&#39;https://developer.mozilla.org/en-US/search?q=URL#search-results-close-container&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// https://developer.mozilla.org/en-US/search?q=URL#search-results-close-container</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// https:</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// developer.mozilla.org</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// developer.mozilla.org</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// (blank - https assumes port 443)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// /en-US/search</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ?q=URL</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// #search-results-close-container </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// https://developer.mozilla.org</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>hash <ul><li>onhashchange事件监听变化</li></ul></li></ul></li><li>history <ul><li><p>back() // 跳到上一个路径</p></li><li><p>forward()// 跳到下一个路径</p></li><li><p>go(0) // 跳到某个路径（参数索引）</p></li><li><p>length // 地址的数量</p></li><li><p>pushState() // 放入一个新地址，并跳到新地址</p><ul><li>data</li><li>title</li><li>url</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;新路径&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;新路径&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/newpath&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>replaceState() // 替换当前的地址</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;新路径&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">&#39;新路径&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;/newpath&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>state // push或者replace时传的状态</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;新路径&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><h3 id="如何检测浏览器的类型" tabindex="-1"><a class="header-anchor" href="#如何检测浏览器的类型" aria-hidden="true">#</a> 如何检测浏览器的类型</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> ua <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent
<span class="token keyword">var</span> isChrome <span class="token operator">=</span> ua<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;Chrome&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isChrome<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拆解url的各部分" tabindex="-1"><a class="header-anchor" href="#拆解url的各部分" aria-hidden="true">#</a> 拆解url的各部分</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span> <span class="token comment">// &#39;http:&#39; &#39;https:&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span> <span class="token comment">// &#39;/learn/199&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解答" tabindex="-1"><a class="header-anchor" href="#解答" aria-hidden="true">#</a> 解答</h2><h3 id="编写一个通用的事件监听函数" tabindex="-1"><a class="header-anchor" href="#编写一个通用的事件监听函数" aria-hidden="true">#</a> 编写一个通用的事件监听函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bindEvent</span><span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> type<span class="token punctuation">,</span> selector<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fn <span class="token operator">=</span> selector
        selector <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
    elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> target
        <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            target <span class="token operator">=</span> e<span class="token punctuation">.</span>target
            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),Q=n("h3",{id:"对于一个无限下拉加载图片的页面-如何给每个图片绑定事件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#对于一个无限下拉加载图片的页面-如何给每个图片绑定事件","aria-hidden":"true"},"#"),s(" 对于一个无限下拉加载图片的页面，如何给每个图片绑定事件")],-1),Z=n("p",null,"使用代理，优点",-1),nn=n("ul",null,[n("li",null,"使代码简洁"),n("li",null,"减少浏览器的内存占用")],-1),sn=n("h2",{id:"ajax",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ajax","aria-hidden":"true"},"#"),s(" ajax")],-1),an={id:"xmlhttprequest",tabindex:"-1"},tn=n("a",{class:"header-anchor",href:"#xmlhttprequest","aria-hidden":"true"},"#",-1),en=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/api&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里的函数异步执行，可参考之前 JS 基础中的异步模块</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>IE低版本使用<code>var xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)</code>创建，</p></li><li><p>xhr.readyState</p><ul><li>0 - (未初始化）还没有调用send()方法</li><li>1 -（载入）已调用send()方法，正在发送请求</li><li>2 -（载入完成）send()方法执行完成，已经接收到全部响应内容</li><li>3 -（交互）正在解析响应内容</li><li>4 -（完成）响应内容解析完成，可以在客户端调用了</li></ul></li><li><p>xhr.status</p><ul><li>200 正常</li><li>404 找不到资源</li><li>5xx 服务器端出错了</li></ul></li></ul><h3 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h3><ul><li><p>浏览器的同源策略：</p><ul><li>url协议、域名、端口不同，就是跨域</li><li>即一个域下的页面中，无法通过 ajax 获取到其他域的接口。</li></ul></li><li><p>可实现跨域的几个标签</p><ul><li><code>&lt;script src=&quot;xxx&quot;&gt;</code><ul><li>可以使用CDN，CDN基本都是其他域的链接。</li><li>可以实现JSONP，获取其他域接口的信息。</li></ul></li><li><code>&lt;img src=&quot;xxxx&quot;/&gt;</code><ul><li><code>&lt;img&gt;</code>可以做打点统计，因为统计方并不一定是同域的。除了能跨域之外，<code>&lt;img&gt;</code>几乎没有浏览器兼容问题</li></ul></li><li><code>&lt;link href=&quot;xxxx&quot;&gt;</code><ul><li>可以使用CDN，CDN基本都是其他域的链接。</li></ul></li></ul></li><li><p>所有的跨域请求方式，都需要信息提供方来做出相应的支持和改动</p></li></ul><h4 id="jsonp-利用script标签的跨域特性实现" tabindex="-1"><a class="header-anchor" href="#jsonp-利用script标签的跨域特性实现" aria-hidden="true">#</a> JSONP（利用script标签的跨域特性实现）</h4><ul><li>从服务端<code>http://www.abc.com/?callback=callbackName</code>下载一段callback函数执行代码，数据作为函数的参数。</li><li>页面中定义一个<code>window.callbackName=function(data){}</code>，函数执行后即可进入callback函数获取到data。</li><li>只能是get请求，后端需要返回固定格式</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 定义window.callbackName函数</span>
window<span class="token punctuation">.</span><span class="token function-variable function">callbackName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 服务端返回函数代码</span>
<span class="token function">callbackName</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cors" tabindex="-1"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> cors</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// server.js</span>
<span class="token comment">// express 跨域</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 请求来源</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 接受的请求类型</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;GET,HEAD,OPTIONS,POST,PUT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 跨域设置</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Origin,X-Requested-With,Content-Type,Accept,Authorization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:8080&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 第二个参数填写允许跨域的域名称，不建议直接写 &quot;*&quot;</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;X-Requested-With&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 接收跨域的cookie</span>
response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Credentials&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为简单请求和复杂请求。</p><ul><li>简单请求</li><li></li></ul><p>以 Ajax 为例，当满足以下条件时，会触发简单请求</p><p>使用下列方法之一：</p><ul><li><p>GET</p></li><li><p>HEAD</p></li><li><p>POST</p></li></ul><p>Content-Type 的值仅限于下列三者之一：</p><ul><li><p>text/plain</p></li><li><p>multipart/form-data</p></li><li><p>application/x-www-form-urlencoded</p></li></ul><p>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</p><ul><li>复杂请求</li></ul><p>那么很显然，不符合以上条件的请求就肯定是复杂请求了。</p><p>对于复杂请求来说，首先会发起一个预检请求，该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。</p><p>对于预检请求来说，如果你使用过 Node 来设置 CORS 的话，可能会遇到过这么一个坑。</p><p>以下以 express 框架举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Methods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PUT, GET, POST, DELETE, OPTIONS&#39;</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>
    <span class="token string">&#39;Access-Control-Allow-Headers&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Origin, X-Requested-With, Content-Type, Accept, Authorization, Access-Control-Allow-Credentials&#39;</span>
  <span class="token punctuation">)</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该请求会验证你的 Authorization 字段，没有的话就会报错。</p><p>当前端发起了复杂请求后，你会发现就算你代码是正确的，返回结果也永远是报错的。因为预检请求也会进入回调中，也会触发 next 方法，因为预检请求并不包含 Authorization 字段，所以服务端会报错。</p><p>想解决这个问题很简单，只需要在回调中过滤 option 方法即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">204</span>
res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Length&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span>
res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> websocket</h2><ul><li>使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>protocol<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>WebSocket API</li></ul><table><thead><tr><th style="text-align:center;">事件</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">Socket.onopen</td><td style="text-align:center;">连接建立时触发</td></tr><tr><td style="text-align:center;">Socket.onmessage</td><td style="text-align:center;">客户端接收服务端数据时触发</td></tr><tr><td style="text-align:center;">Socket.onerror</td><td style="text-align:center;">通信发生错误时触发</td></tr><tr><td style="text-align:center;">Socket.onclose</td><td style="text-align:center;">连接关闭时触发</td></tr></tbody></table><p>WebSocket 方法</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">Socket.send()</td><td style="text-align:center;">使用连接发送数据</td></tr><tr><td style="text-align:center;">Socket.close()</td><td style="text-align:center;">关闭连接</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>WebSocket<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:3001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接服务器成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 向服务器发送消息</span>
        <span class="token keyword">let</span> params<span class="token operator">=</span><span class="token punctuation">{</span>
        <span class="token literal-property property">region</span><span class="token operator">:</span><span class="token string">&#39;姑苏区&#39;</span>
        <span class="token punctuation">}</span>
        ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;服务器关闭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;连接出错&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 接收服务器的消息</span>
    ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;message:&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span>data<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="存储" tabindex="-1"><a class="header-anchor" href="#存储" aria-hidden="true">#</a> 存储</h2><h3 id="cookie、session" tabindex="-1"><a class="header-anchor" href="#cookie、session" aria-hidden="true">#</a> cookie、session</h3><ul><li>cookie缺点：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  document<span class="token punctuation">.</span>cookie<span class="token operator">=</span><span class="token string">&#39;a=1; b=2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>// cookie.js
  const cookie={
      setCookie(cname,cvalue,exdays){
          var d = new Date();
          d.setTime(d.getTime()+(exdays*24*60*60*1000));
          var expires = &quot;expires=&quot;+d.toGMTString();
          document.cookie = cname + &quot;=&quot; + cvalue + &quot;; &quot; + expires;
      },
      getCookie(cname){
          var name = cname + &quot;=&quot;;
          var ca = document.cookie.split(&#39;;&#39;);
          for(var i=0; i&lt;ca.length; i++) 
          {
              var c = ca[i].trim();
              if (c.indexOf(name)==0) return c.substring(name.length,c.length);
          }
          return &quot;&quot;;
      },
      checkCookie(){
          var username=cookie.getCookie(&quot;username&quot;);
          if (username!=&quot;&quot;){
              alert(&quot;Welcome again &quot; + username);
          }
          else {
              username = prompt(&quot;Please enter your name:&quot;,&quot;&quot;);
              if (username!=&quot;&quot; &amp;&amp; username!=null){
                  setCookie(&quot;username&quot;,username,365);
              }
          }
      }
  }
  export default cookie;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 删除cookie</span>
cookie<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 保存30天</span>
cookie<span class="token punctuation">.</span><span class="token function">setCookie</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取cookie</span>
<span class="token keyword">let</span> cookieUser<span class="token operator">=</span>cookie<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="locationstorage、sessionstorage-es6" tabindex="-1"><a class="header-anchor" href="#locationstorage、sessionstorage-es6" aria-hidden="true">#</a> locationStorage、sessionStorage[ES6]</h3><ul><li>存储在sessionStorage或localStorage中的数据特定于该页面的协议</li><li>localStorage <ul><li><p>存储量增大到 5M</p></li><li><p>不会带到 http 请求中</p></li><li><p>API 适用于数据存储 <code>localStorage.setItem(key, value)</code> <code>localStorage.getItem(key)</code></p></li><li><p>iOS系统的safari浏览器的隐藏模式，使用<code>localStorage.setItem</code>，因此使用时尽量加入到<code>try-catch</code>中</p></li></ul></li><li>sessionStorage <ul><li>数据在页面会话结束时会被清除。页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。</li><li>在新标签或窗口打开一个页面时会在顶级浏览上下文中初始化一个新的会话(这点和 session cookies 的运行方式不同)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 保存sessionStorage</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取sessionStorage</span>
<span class="token keyword">let</span> sessionUser<span class="token operator">=</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="cookie-sessionstorage-和-localstorage-的区别" tabindex="-1"><a class="header-anchor" href="#cookie-sessionstorage-和-localstorage-的区别" aria-hidden="true">#</a> cookie，sessionStorage 和 localStorage 的区别</h4><ul><li>localStorage 5m 一直存 不能跨域 存储的地方是浏览器</li><li>sessionStorage 不关浏览器就存活</li><li>cookie 4k 每次请求时携带 一般做注册登录，存放不敏感信息（密码 账户不能存）不安全 <ul><li>不能跨域设置cookie，但可以一级域名和二级域名设置</li></ul></li><li>session 比较安全 内容存放在服务端的(session 是基于cookie) 目前 注册登录 大致的流程 默认登录后 给你个标识 每次请求时 会自动带上cookie 可以通过session找到当前账户对应的内容 <ul><li>服务器内存中，重启后没了，会存放到数据库中</li></ul></li></ul><h2 id="jquery" tabindex="-1"><a class="header-anchor" href="#jquery" aria-hidden="true">#</a> jquery</h2><ul><li><p>移动端使用 zepto，使用方法和 jquery 一样。API 地址 http://jquery.cuishifeng.cn/</p></li><li><p>jquery文档：jquery123,http://tool.oschina.net/apidocs/apidoc?api=jquery</p></li><li><p>jquery插件：jq22</p></li></ul><h3 id="dom-操作" tabindex="-1"><a class="header-anchor" href="#dom-操作" aria-hidden="true">#</a> DOM 操作</h3><h4 id="dom-查询" tabindex="-1"><a class="header-anchor" href="#dom-查询" aria-hidden="true">#</a> DOM 查询</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 建议是用 $xxx 命名</span>
<span class="token keyword">var</span> $p1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#p1&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dom-结构操作" tabindex="-1"><a class="header-anchor" href="#dom-结构操作" aria-hidden="true">#</a> DOM 结构操作</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> $div1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#div1&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 增加新建节点</span>
<span class="token keyword">var</span> $newP <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;new p&lt;/p&gt;&#39;</span><span class="token punctuation">)</span>
$div1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$newP<span class="token punctuation">)</span>
<span class="token comment">// 移动现有节点</span>
<span class="token keyword">var</span> $p1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#P1&#39;</span><span class="token punctuation">)</span>
$div1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$p1<span class="token punctuation">)</span>

<span class="token comment">// 获取父节点</span>
$p1<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 获取子节点</span>
$div1<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 移除节点</span>
$p1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件绑定" tabindex="-1"><a class="header-anchor" href="#事件绑定" aria-hidden="true">#</a> 事件绑定</h3><h4 id="基本应用" tabindex="-1"><a class="header-anchor" href="#基本应用" aria-hidden="true">#</a> 基本应用</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> $a <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#a1&#39;</span><span class="token punctuation">)</span>
$a<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;clicked&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代理" tabindex="-1"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> $div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
$div<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ajax-1" tabindex="-1"><a class="header-anchor" href="#ajax-1" aria-hidden="true">#</a> ajax</h3><h4 id="非跨域" tabindex="-1"><a class="header-anchor" href="#非跨域" aria-hidden="true">#</a> 非跨域</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dataType</span><span class="token operator">:</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">项</th><th style="text-align:left;">值</th></tr></thead><tbody><tr><td style="text-align:left;">type</td><td style="text-align:left;">默认GET</td></tr><tr><td style="text-align:left;">url</td><td style="text-align:left;">默认当前页地址</td></tr><tr><td style="text-align:left;">success</td><td style="text-align:left;">请求成功回调函数</td></tr><tr><td style="text-align:left;">async</td><td style="text-align:left;">默认true,默认异步</td></tr><tr><td style="text-align:left;">beforeSend(XHR)</td><td style="text-align:left;">发送请求前修改XMLHttpRequest对象，XMLHttpRequest为唯一参数，如果返回false,可以取消本次ajax请求</td></tr><tr><td style="text-align:left;">cache</td><td style="text-align:left;">默认值:true,dataType为script和jsonp时默认为false,设置false将不缓存此页面</td></tr><tr><td style="text-align:left;">contentType</td><td style="text-align:left;">默认&quot;application/x-www-form-urlencoded&quot;,发送信息至服务器时内容编码类型</td></tr><tr><td style="text-align:left;">dataType</td><td style="text-align:left;">可用值:<code>xml</code>,<code>html</code>,<code>script</code>,<code>json</code>,<code>jsonp</code>,<code>text</code>,注意：使用JSONP 形式调用函数时,如&quot;myurl?callback=?&quot;jQuery 将自动替换为正确的函数名,以执行回调函数.</td></tr><tr><td style="text-align:left;">error</td><td style="text-align:left;">默认自动判断(xml 或html), 请求失败时调用此函数</td></tr></tbody></table><h4 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h4><p>提供方提供的数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">myCallback</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;x&quot;</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;y&quot;</span><span class="token operator">:</span> <span class="token number">200</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收方的写法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:8882/x-origin.json&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">&#39;jsonp&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">jsonpCallback</span><span class="token operator">:</span> <span class="token string">&#39;myCallback&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="xml" tabindex="-1"><a class="header-anchor" href="#xml" aria-hidden="true">#</a> XML</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//获取id节点</span>
    <span class="token keyword">var</span> id<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">//获取节点文本</span>
        id_value<span class="token operator">=</span>id<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">//获取student下的email属性。</span>
        email<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//构造HTML字符串，通过append方法添加进之前建立代码片段</span>
    frag<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;li&gt;&quot;</span><span class="token operator">+</span>id_value<span class="token operator">+</span><span class="token string">&quot;-&quot;</span><span class="token operator">+</span>email<span class="token operator">+</span><span class="token string">&quot;&lt;/li&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>excel转为xml <ul><li>选项中勾选开发工具</li><li>新建一个xml模板，两个数据以上，列名写好</li><li>点击源，添加映射，把列拖入表格中</li><li>填入数据</li><li>另存为xml</li></ul></li><li>问题：转日期出错(日期格式统一改为字符串即可)</li><li>上线后本地能获取为json文件为对象的json数据不能变为对象了（是不是hbuilder的问题？？？）</li></ul>`,68);function pn(ln,on){const e=i("router-link"),p=i("highlight-box"),l=i("mark-check");return u(),r("div",null,[k,n("nav",v,[n("ul",null,[n("li",null,[a(e,{to:"#dom操作"},{default:t(()=>[s("DOM操作")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#node"},{default:t(()=>[s("Node")]),_:1})]),n("li",null,[a(e,{to:"#document"},{default:t(()=>[s("Document")]),_:1})]),n("li",null,[a(e,{to:"#element"},{default:t(()=>[s("Element")]),_:1})]),n("li",null,[a(e,{to:"#eventtarget"},{default:t(()=>[s("EventTarget")]),_:1})]),n("li",null,[a(e,{to:"#text"},{default:t(()=>[s("Text")]),_:1})]),n("li",null,[a(e,{to:"#documentfragment"},{default:t(()=>[s("DocumentFragment")]),_:1})]),n("li",null,[a(e,{to:"#window"},{default:t(()=>[s("Window")]),_:1})]),n("li",null,[a(e,{to:"#dom事件"},{default:t(()=>[s("DOM事件")]),_:1})])])]),n("li",null,[a(e,{to:"#bom操作"},{default:t(()=>[s("BOM操作")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#如何检测浏览器的类型"},{default:t(()=>[s("如何检测浏览器的类型")]),_:1})]),n("li",null,[a(e,{to:"#拆解url的各部分"},{default:t(()=>[s("拆解url的各部分")]),_:1})])])]),n("li",null,[a(e,{to:"#解答"},{default:t(()=>[s("解答")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#编写一个通用的事件监听函数"},{default:t(()=>[s("编写一个通用的事件监听函数")]),_:1})]),n("li",null,[a(e,{to:"#对于一个无限下拉加载图片的页面-如何给每个图片绑定事件"},{default:t(()=>[s("对于一个无限下拉加载图片的页面，如何给每个图片绑定事件")]),_:1})])])]),n("li",null,[a(e,{to:"#ajax"},{default:t(()=>[s("ajax")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#xmlhttprequest"},{default:t(()=>[a(p,null,{default:t(()=>[s("XMLHttpRequest")]),_:1})]),_:1})]),n("li",null,[a(e,{to:"#跨域"},{default:t(()=>[s("跨域")]),_:1})])])]),n("li",null,[a(e,{to:"#websocket"},{default:t(()=>[s("websocket")]),_:1})]),n("li",null,[a(e,{to:"#存储"},{default:t(()=>[s("存储")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#cookie、session"},{default:t(()=>[s("cookie、session")]),_:1})]),n("li",null,[a(e,{to:"#locationstorage、sessionstorage-es6"},{default:t(()=>[s("locationStorage、sessionStorage[ES6]")]),_:1})])])]),n("li",null,[a(e,{to:"#jquery"},{default:t(()=>[s("jquery")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#dom-操作"},{default:t(()=>[s("DOM 操作")]),_:1})]),n("li",null,[a(e,{to:"#事件绑定"},{default:t(()=>[s("事件绑定")]),_:1})]),n("li",null,[a(e,{to:"#ajax-1"},{default:t(()=>[s("ajax")]),_:1})])])])])]),m,g,a(l,{id:"Node"}),b,a(l,{id:"document"}),n("ul",null,[h,n("li",null,[f,n("ul",null,[n("li",null,[a(p,null,{default:t(()=>[s("scroll")]),_:1})]),y,n("li",null,[a(p,null,{default:t(()=>[s("wheel")]),_:1})]),x,n("li",null,[s("Keyboard events "),n("ul",null,[n("li",null,[a(p,null,{default:t(()=>[s("keydown")]),_:1})]),n("li",null,[a(p,null,{default:t(()=>[s("keypress")]),_:1})]),n("li",null,[a(p,null,{default:t(()=>[s("keyup")]),_:1})])])]),n("li",null,[s("Load & unload events "),n("ul",null,[n("li",null,[a(p,null,{default:t(()=>[s("DOMContentLoaded")]),_:1})]),n("li",null,[a(p,null,{default:t(()=>[s("readystatechange")]),_:1})])])]),q])])]),w,a(l,{id:"element"}),_,a(l,{id:"eventtarge"}),j,T,a(l,{id:"text"}),n("ul",null,[n("li",null,[a(p,null,{default:t(()=>[s("nodeType:3")]),_:1})]),E]),S,a(l,{id:"DocumentFragment"}),n("ul",null,[n("li",null,[a(p,null,{default:t(()=>[s("nodeType值为11")]),_:1})]),D]),N,a(l,{id:"windowduixiang"}),n("h4",C,[O,s(),a(p,null,{default:t(()=>[s("window事件")]),_:1})]),M,n("ul",null,[n("li",null,[s("DOM事件(DOM标准)的级别 "),n("table",null,[A,n("tbody",null,[L,n("tr",null,[H,n("td",P,[s("element.addEventListener('click',function(){},false)(DOM1标准设立的时候没有事件相关的东西，所以直接是2)("),a(p,null,{default:t(()=>[s("默认false,冒泡阶段触发，true,捕获阶段触发。")]),_:1}),s(")")])]),I])])]),R,B]),a(l,{id:"shijian"}),$,n("ul",null,[U,n("li",null,[s("Event对象 "),X,a(l,{id:"eventduixiang"}),n("ul",null,[n("li",null,[W,n("ul",null,[n("li",null,[a(p,null,{default:t(()=>[s("target")]),_:1}),s(" 当前目标元素,事件委托中指子元素")]),n("li",null,[a(p,null,{default:t(()=>[s("currentTarget")]),_:1}),s(" 当前绑定的元素，事件委托中指父级元素")])])]),n("li",null,[a(p,null,{default:t(()=>[s("Event键盘属性")]),_:1}),J]),n("li",null,[a(p,null,{default:t(()=>[s("Event鼠标位置属性")]),_:1}),z]),n("li",null,[a(p,null,{default:t(()=>[s("Event方法")]),_:1}),G])])])]),a(l,{id:"zidingyievent"}),n("ul",null,[n("li",null,[a(p,null,{default:t(()=>[s("自定义事件")]),_:1}),F])]),V,a(l,{id:"shijiandaili"}),n("ul",null,[n("li",null,[a(p,null,{default:t(()=>[s("代理的优点")]),_:1}),K])]),a(l,{id:"shijiandailidemo"}),Y,a(l,{id:"view2"}),Q,Z,nn,sn,a(l,{id:"xmlhttprequest"}),n("h3",an,[tn,s(),a(p,null,{default:t(()=>[s("XMLHttpRequest")]),_:1})]),en])}const un=c(d,[["render",pn],["__file","index.html.vue"]]);export{un as default};
