(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{480:function(t,i,a){"use strict";a.r(i);var e=a(45),r=Object(e.a)({},(function(){var t=this,i=t.$createElement,a=t._self._c||i;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" git")]),t._v(" "),a("h2",{attrs:{id:"参考文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰：常用命令清单"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE",target:"_blank",rel:"noopener noreferrer"}},[t._v("git book"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"新建代码库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建代码库"}},[t._v("#")]),t._v(" 新建代码库")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在当前目录新建一个Git代码库\n$ git init")])]),t._v(" "),a("li",[a("p",[t._v("新建一个目录，将其初始化为Git代码库\n$ git init [project-name]")])]),t._v(" "),a("li",[a("p",[t._v("下载一个项目和它的整个代码历史\n$ git clone [url]")])])]),t._v(" "),a("h2",{attrs:{id:"二、配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、配置"}},[t._v("#")]),t._v(" 二、配置")]),t._v(" "),a("p",[t._v("Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("显示当前的Git配置\n$ git config --list")])]),t._v(" "),a("li",[a("p",[t._v("编辑Git配置文件\n$ git config -e [--global]")])]),t._v(" "),a("li",[a("p",[t._v('设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"')])])]),t._v(" "),a("h2",{attrs:{id:"三、增加-删除文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、增加-删除文件"}},[t._v("#")]),t._v(" 三、增加/删除文件")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("添加指定文件到暂存区\n$ git add [file1] [file2] ...")])]),t._v(" "),a("li",[a("p",[t._v("添加指定目录到暂存区，包括子目录\n$ git add [dir]")])]),t._v(" "),a("li",[a("p",[t._v("添加当前目录的所有文件到暂存区\n$ git add .")])]),t._v(" "),a("li",[a("p",[t._v("添加每个变化前，都会要求确认")])]),t._v(" "),a("li",[a("p",[t._v("对于同一个文件的多处变化，可以实现分次提交\n$ git add -p")])]),t._v(" "),a("li",[a("p",[t._v("删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...")])]),t._v(" "),a("li",[a("p",[t._v("停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]")])]),t._v(" "),a("li",[a("p",[t._v("改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]")])])]),t._v(" "),a("h2",{attrs:{id:"四、代码提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、代码提交"}},[t._v("#")]),t._v(" 四、代码提交")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("提交暂存区到仓库区\n$ git commit -m [message]")])]),t._v(" "),a("li",[a("p",[t._v("提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]")])]),t._v(" "),a("li",[a("p",[t._v("提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a")])]),t._v(" "),a("li",[a("p",[t._v("提交时显示所有diff信息\n$ git commit -v")])]),t._v(" "),a("li",[a("p",[t._v("使用一次新的commit，替代上一次提交")])]),t._v(" "),a("li",[a("p",[t._v("如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]")])]),t._v(" "),a("li",[a("p",[t._v("重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...")])])]),t._v(" "),a("h2",{attrs:{id:"五、分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、分支"}},[t._v("#")]),t._v(" 五、分支")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("列出所有本地分支\n$ git branch")])]),t._v(" "),a("li",[a("p",[t._v("列出所有远程分支\n$ git branch -r")])]),t._v(" "),a("li",[a("p",[t._v("列出所有本地分支和远程分支\n$ git branch -a")])]),t._v(" "),a("li",[a("p",[t._v("新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]")])]),t._v(" "),a("li",[a("p",[t._v("新建一个分支，并切换到该分支\n$ git checkout -b [branch]")])]),t._v(" "),a("li",[a("p",[t._v("新建一个分支，指向指定commit\n$ git branch [branch] [commit]")])]),t._v(" "),a("li",[a("p",[t._v("新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]")])]),t._v(" "),a("li",[a("p",[t._v("切换到指定分支，并更新工作区\n$ git checkout [branch-name]")])]),t._v(" "),a("li",[a("p",[t._v("切换到上一个分支\n$ git checkout -")])]),t._v(" "),a("li",[a("p",[t._v("建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]")])]),t._v(" "),a("li",[a("p",[t._v("合并指定分支到当前分支\n$ git merge [branch]")])]),t._v(" "),a("li",[a("p",[t._v("选择一个commit，合并进当前分支\n$ git cherry-pick [commit]")])]),t._v(" "),a("li",[a("p",[t._v("删除分支\n$ git branch -d [branch-name]")])]),t._v(" "),a("li",[a("p",[t._v("删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]")])])]),t._v(" "),a("h2",{attrs:{id:"六、标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、标签"}},[t._v("#")]),t._v(" 六、标签")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("列出所有tag\n$ git tag")])]),t._v(" "),a("li",[a("p",[t._v("新建一个tag在当前commit\n$ git tag [tag]")])]),t._v(" "),a("li",[a("p",[t._v("新建一个tag在指定commit\n$ git tag [tag] [commit]")])]),t._v(" "),a("li",[a("p",[t._v("删除本地tag\n$ git tag -d [tag]")])]),t._v(" "),a("li",[a("p",[t._v("删除远程tag\n$ git push origin :refs/tags/[tagName]")])]),t._v(" "),a("li",[a("p",[t._v("查看tag信息\n$ git show [tag]")])]),t._v(" "),a("li",[a("p",[t._v("提交指定tag\n$ git push [remote] [tag]")])]),t._v(" "),a("li",[a("p",[t._v("提交所有tag\n$ git push [remote] --tags")])]),t._v(" "),a("li",[a("p",[t._v("新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]")])])]),t._v(" "),a("h2",{attrs:{id:"七、查看信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、查看信息"}},[t._v("#")]),t._v(" 七、查看信息")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("显示有变更的文件\n$ git status")])]),t._v(" "),a("li",[a("p",[t._v("显示当前分支的版本历史\n$ git log")])]),t._v(" "),a("li",[a("p",[t._v("显示commit历史，以及每次commit发生变更的文件\n$ git log --stat")])]),t._v(" "),a("li",[a("p",[t._v("搜索提交历史，根据关键词\n$ git log -S [keyword]")])]),t._v(" "),a("li",[a("p",[t._v("显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s")])]),t._v(" "),a("li",[a("p",[t._v('显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] HEAD --grep feature')])]),t._v(" "),a("li",[a("p",[t._v("显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]")])]),t._v(" "),a("li",[a("p",[t._v("显示指定文件相关的每一次diff\n$ git log -p [file]")])]),t._v(" "),a("li",[a("p",[t._v("显示过去5次提交\n$ git log -5 --pretty --oneline")])]),t._v(" "),a("li",[a("p",[t._v("显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn")])]),t._v(" "),a("li",[a("p",[t._v("显示指定文件是什么人在什么时间修改过\n$ git blame [file]")])]),t._v(" "),a("li",[a("p",[t._v("显示暂存区和工作区的差异\n$ git diff")])]),t._v(" "),a("li",[a("p",[t._v("显示暂存区和上一个commit的差异\n$ git diff --cached [file]")])]),t._v(" "),a("li",[a("p",[t._v("显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD")])]),t._v(" "),a("li",[a("p",[t._v("显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]")])]),t._v(" "),a("li",[a("p",[t._v('显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"')])]),t._v(" "),a("li",[a("p",[t._v("显示某次提交的元数据和内容变化\n$ git show [commit]")])]),t._v(" "),a("li",[a("p",[t._v("显示某次提交发生变化的文件\n$ git show --name-only [commit]")])]),t._v(" "),a("li",[a("p",[t._v("显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]")])]),t._v(" "),a("li",[a("p",[t._v("显示当前分支的最近几次提交\n$ git reflog")])])]),t._v(" "),a("h2",{attrs:{id:"八、远程同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、远程同步"}},[t._v("#")]),t._v(" 八、远程同步")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("下载远程仓库的所有变动\n$ git fetch [remote]")])]),t._v(" "),a("li",[a("p",[t._v("显示所有远程仓库\n$ git remote -v")])]),t._v(" "),a("li",[a("p",[t._v("显示某个远程仓库的信息\n$ git remote show [remote]")])]),t._v(" "),a("li",[a("p",[t._v("增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]")])]),t._v(" "),a("li",[a("p",[t._v("取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]")])]),t._v(" "),a("li",[a("p",[t._v("上传本地指定分支到远程仓库\n$ git push [remote] [branch]")])]),t._v(" "),a("li",[a("p",[t._v("强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force")])]),t._v(" "),a("li",[a("p",[t._v("推送所有分支到远程仓库\n$ git push [remote] --all")])])]),t._v(" "),a("h2",{attrs:{id:"九、撤销"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、撤销"}},[t._v("#")]),t._v(" 九、撤销")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("恢复暂存区的指定文件到工作区\n$ git checkout [file]")])]),t._v(" "),a("li",[a("p",[t._v("恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]")])]),t._v(" "),a("li",[a("p",[t._v("恢复暂存区的所有文件到工作区\n$ git checkout .")])]),t._v(" "),a("li",[a("p",[t._v("重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]")])]),t._v(" "),a("li",[a("p",[t._v("重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard")])]),t._v(" "),a("li",[a("p",[t._v("重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]")])]),t._v(" "),a("li",[a("p",[t._v("重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]")])]),t._v(" "),a("li",[a("p",[t._v("重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]")])]),t._v(" "),a("li",[a("p",[t._v("新建一个commit，用来撤销指定commit")])]),t._v(" "),a("li",[a("p",[t._v("后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]")])]),t._v(" "),a("li",[a("p",[t._v("暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop")])])]),t._v(" "),a("h2",{attrs:{id:"十、其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十、其他"}},[t._v("#")]),t._v(" 十、其他")]),t._v(" "),a("ul",[a("li",[t._v("生成一个可供发布的压缩包")])]),t._v(" "),a("p",[t._v("$ git archive")]),t._v(" "),a("h2",{attrs:{id:"git-flog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-flog"}},[t._v("#")]),t._v(" git flog")]),t._v(" "),a("p",[t._v("查找历史版本记录，方便回滚")]),t._v(" "),a("h2",{attrs:{id:"git-放弃本地修改-强行拉取更新-慎用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-放弃本地修改-强行拉取更新-慎用"}},[t._v("#")]),t._v(" git 放弃本地修改，强行拉取更新(慎用)")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("git fetch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("all\ngit reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("master\ngit pull "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可以省略")]),t._v("\n")])])]),a("h2",{attrs:{id:"git-reset-hard恢复操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-hard恢复操作"}},[t._v("#")]),t._v(" git reset --hard恢复操作")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有commit过的操作，最后commit的在最上面0的位置上")]),t._v("\ngit reflog\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 恢复commmit的文件")]),t._v("\ngit reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("98")]),t._v("abc5a\n")])])]),a("h2",{attrs:{id:"下载某个版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下载某个版本"}},[t._v("#")]),t._v(" 下载某个版本")]),t._v(" "),a("p",[t._v("git log 查看版本号\ngit checkout b74be8e78ff*****0a15d04967（版本号）")]),t._v(" "),a("h2",{attrs:{id:"git提交时出现non-fast-forward冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git提交时出现non-fast-forward冲突"}},[t._v("#")]),t._v(" git提交时出现non-fast-forward冲突")]),t._v(" "),a("ul",[a("li",[t._v("原因\n"),a("ul",[a("li",[t._v("git仓库已有部分代码，不允许直接代码覆盖")])])]),t._v(" "),a("li",[t._v("方式\n"),a("ul",[a("li",[t._v("强制用本地代码覆盖git仓库内容\n"),a("ul",[a("li",[t._v("git push -f")])])]),t._v(" "),a("li",[t._v("先把git的东西fetch到本地然后merge再commit push上去\n"),a("ul",[a("li",[t._v("git fetch")]),t._v(" "),a("li",[t._v("git merge(输完去文件中解决冲突)")]),t._v(" "),a("li",[t._v("git add .")]),t._v(" "),a("li",[t._v("git commit -m -a")]),t._v(" "),a("li",[t._v("git push origin master")])])])])])]),t._v(" "),a("h2",{attrs:{id:"npm-install-出现-chromedriver-installation-failed-error-with-http-s-request-error-read-etimedout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm-install-出现-chromedriver-installation-failed-error-with-http-s-request-error-read-etimedout"}},[t._v("#")]),t._v(" npm install 出现 ChromeDriver installation failed Error with http(s) request: Error: read ETIMEDOUT")]),t._v(" "),a("ul",[a("li",[t._v("执行 npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver")])]),t._v(" "),a("h2",{attrs:{id:"git下载缓慢解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git下载缓慢解决办法"}},[t._v("#")]),t._v(" git下载缓慢解决办法")]),t._v(" "),a("ul",[a("li",[t._v("更改hosts文件")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("查询网站的IP地址，进入"),a("img",{attrs:{src:"http://tool.chinaz.com/dns",alt:"dns"}}),t._v("，输入 "),a("code",[t._v("github.com")]),t._v("，选择一个TTL值较小的IP地址，比如，我们选择图中美国的192.30.253.113；")])]),t._v(" "),a("li",[a("p",[t._v("打开电脑的 "),a("code",[t._v("C:\\Windows\\System32\\drivers\\etc")]),t._v(" 目录，找到hosts文件:这里有两个hosts文件，用记事本打开上面的那个进行编辑。在文件末追加 192.30.253.113 github.com，并采用相同的方式追加并采用相同的方式追加151.101.109.194  github.global.ssl.fastly.Net  注意：前面没有“#”号！")])]),t._v(" "),a("li",[a("p",[t._v("刷新DNS缓存，在Windows命令行中输入："),a("code",[t._v("ipconfig /flushdns")])])]),t._v(" "),a("li",[a("p",[t._v("再重新输入"),a("code",[t._v("git clone https://github.com/opencv/opencv_contrib/")]),t._v(",可以看到下载速度得到明显提升,相应的文件也很快下载完毕。")])])]),t._v(" "),a("p",[t._v("mac host\n/etc/hosts")]),t._v(" "),a("h2",{attrs:{id:"git-ssh配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-ssh配置"}},[t._v("#")]),t._v(" git ssh配置")]),t._v(" "),a("p",[t._v("1.检查是否已经有SSH Key。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$cd /.ssh\n")])])]),a("p",[t._v("2.生成一个新的SSH。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('$ ssh-keygen -t rsa -C "email@github.com" #github注册的邮箱\n')])])]),a("p",[t._v("之后直接回车，不用填写东西。之后会让你输入密码（可以不输入密码，直接为空，这样更新代码不用每次输入 id_rsa 密码了）。然后就生成一个目录.ssh ，里面有两个文件：id_rsa , id_rsa.pub（id_rsa中保存的是私钥，id_rsa.pub中保存的是公钥）\n3.按命令行提示找到公钥地址。跳转文件夹是访达菜单中的前往-前往文件夹，显示隐藏文件夹按"),a("code",[t._v("shift+command+.")]),t._v("。文件权限右击文件-显示简介-解锁-修改为只读。将公钥复制到github上。\n4. "),a("code",[t._v("ssh -T git@github.com")]),t._v("测试，显示success则配置成功可以clone了\n5. 显示"),a("code",[t._v("Permission denied(publickey)")]),t._v("，使用"),a("code",[t._v("ssh -vT git@github.com")]),t._v("来查看错误log，注意其中的查找公钥地址。将公钥复制到它查找的地址中即可。")])])}),[],!1,null,null,null);i.default=r.exports}}]);