import{_ as d,r as c,o as k,c as v,b as n,e as s,w as t,d as a,f as m,a as o}from"./app-E-cEvfoH.js";const b={},g=n("h1",{id:"js基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js基础","aria-hidden":"true"},"#"),a(" JS基础")],-1),h={class:"table-of-contents"},f=n("h2",{id:"变量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#变量","aria-hidden":"true"},"#"),a(" 变量")],-1),y=n("h3",{id:"类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#类型","aria-hidden":"true"},"#"),a(" 类型")],-1),x=n("ul",null,[n("li",null,"值类型：string,boolean,number,undefined")],-1),w=n("ul",null,[n("li",null,"引用类型：object(date,RegExp),array,function,null（引用类型可以自由设置属性，除了null）")],-1),j=o('<ul><li><p><code>typeof</code>可以区分类型有<code>number</code> <code>string</code> <code>boolean</code> <code>undefined</code>（值类型） <code>function</code> <code>object</code>（引用类型）</p></li><li><p>js内置函数（数据封装类对象）</p><ul><li><code>Object</code> <code>Array</code> <code>Boolean</code> <code>Number</code> <code>String</code> <code>Function</code> <code>Date</code> <code>RegExp</code> <code>Error</code></li></ul></li><li><p><code>===</code>和<code>==</code></p><ul><li><code>==</code>会先试图类型转换，然后再比较，<code>===</code>不会类型转换</li><li>必须用<code>===</code>。</li><li>唯一用<code>==</code>的地方：obj.a === null || obj.a === undefined ，简写形式obj.a == null</li></ul></li></ul><h3 id="显示类型转换" tabindex="-1"><a class="header-anchor" href="#显示类型转换" aria-hidden="true">#</a> 显示类型转换</h3>',2),_=o("<p>Number函数</p><ul><li><strong>字符串</strong>： <ul><li>可解析数值:相应的数值</li><li>不可解析数值:NaN</li><li>空字符串:0</li></ul></li><li><strong>布尔值</strong>： <ul><li>true:1</li><li>false:0</li></ul></li><li><strong>undefined</strong>：NaN</li><li><strong>null</strong>：0</li></ul>",2),N=o(`<ul><li><strong>对象</strong>：</li><li>对象在转换类型的时候，会调用内置的 [[ToPrimitive]] 函数，对于该函数来说，算法逻辑一般来说如下： <ol><li>调用valueOf()</li><li>调用toString()</li><li>报错</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">500</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 是原始数据类型，就返回结果</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">200</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从上往下依次调用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),E=n("li",null,[n("p",null,"Number等同于一元正号(+)")],-1),O=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//相当于 Number({})==&gt;NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),S=n("ul",null,[n("li",null,[n("strong",null,"基本类型"),a("：转成对应的字符串")])],-1),A=n("ul",null,[n("li",null,[n("strong",null,"对象"),a("： "),n("ol",null,[n("li",null,"调用toString()"),n("li",null,"调用valueOf()"),n("li",null,"报错")])])],-1),q=o("<li>Boolean函数 <ul><li><code>undefined</code> <code>null</code> <code>0</code> <code>NaN</code> <code>空字符串</code>:false</li><li>其他:true</li></ul></li>",1),P=o('<div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li><code>obj</code> <code>arr</code> <code>func</code> <code>的valueOf()</code>: <code>obj</code> <code>arr</code> <code>func</code></li><li><code>obj.toString()</code>:<code>&quot;[object Object]&quot;</code></li><li><code>arr.toString()</code>:<code>arr.join(&#39;,&#39;)</code></li><li><code>func.toString()</code>:<code>函数中包含的代码转为字符串的值</code></li></ul></div><h3 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换" aria-hidden="true">#</a> 隐式类型转换</h3>',2),C=n("ul",null,[n("li",null,[a("四则运算 "),n("ul",null,[n("li",null,[n("strong",null,"+"),a("：只要其中一个是String类型，表达式的值转为String。若无字符串，表达式便转为Number类型")]),n("li",null,[n("strong",null,"其余"),a("：只要其中一个是Number类型，表达式的值便转为Number。")]),n("li",null,[n("strong",null,"非法字符"),a("：对于非法字符的情况通常会返回NaN")])])])],-1),I=o(`<ol><li>加号操作</li></ol><ul><li>通过加号运算符进行运算 <ul><li>字符串与加号运算符组成字符串连接操作</li><li>非字符串与加号运算符组成算术运算操作（需要将对应项转换成Number类型后进行操作）</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span> <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">NaN</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token string">&#39;hello123&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>字符串间的比较</li></ol><ul><li>字符串的比较是从左到右按位进行，将对应位的字符转换成ASCII码的值进行大小比较。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;abe&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token comment">// 等同于</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 49</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 50</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 49 &gt; 50 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token boolean">false</span>
<span class="token boolean">false</span>
<span class="token boolean">false</span>
<span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>引用类型之间的比较</li></ol><ul><li>调用valueOf()进行比较 <ul><li>返回值是基本类型 <ul><li>转换成number类型进行比较</li></ul></li><li>返回值不是基本类型 <ul><li>返回值的引用地址是一致：相等</li><li>返回值的引用地址是不一致：不相等</li></ul></li></ul></li></ul>`,11),z=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 为什么[] == ![]会为true呢？</span>
<span class="token comment">// 等同于</span>
<span class="token comment">//第一步![]转成Boolean类型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [] == false</span>
<span class="token comment">// 第二步转成Number类型再进行关系运算</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0 == 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token boolean">false</span>
<span class="token boolean">true</span>
<span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>逻辑非以及其关系运算</li></ol><ul><li>在JavaScript中逻辑非会调用Boolean转换，但是在关系运算过程中会将值转换成Number类型再进行比较。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 布尔值判断</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">123</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>
<span class="token comment">// 关系运算</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 布尔值判断</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token comment">// 关系运算</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>浮点数相加</li></ol><ul><li>这是一个浮点数计算精度问题，在JavaScript中只有一个数字类型number，而number使用的是IEEE 754双精度浮点格式。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token comment">// 结果是 0.30000000000000004，而不是 0.3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>特殊情况</li></ol><ul><li>主要是考查对JavaScript中原始值的理解。 <ul><li>null特指对象的值未设置</li><li>undefined指一个原始值自动分配给刚刚声明的变量或没有实际参数的形式参数</li><li>NaN是（Not a Number）的缩写，当一个值不能被Number转换时返回NaN,NaN不等于任何值</li><li>0是原始值为0的数字</li><li>&#39;&#39;是原始值为空的字符串</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">*</span> <span class="token string">&#39;a&#39;</span>     <span class="token comment">// =&gt; NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>判断语句 <ul><li>转换规则同Boolean的构造函数。</li></ul></li><li>Native调用 <ul><li>比如console.log、alert调用自动转为字符串类型</li></ul></li></ul><h4 id="常见题目" tabindex="-1"><a class="header-anchor" href="#常见题目" aria-hidden="true">#</a> 常见题目</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment">// &quot;&quot;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// [object Object]</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment">// [object Object]</span>
<span class="token comment">// 所有浏览器都认为{}是区块语句，计算+[]，得出0</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">+</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// [object Object][object Object]</span>
<span class="token comment">// 谷歌浏览器是正常结果，火狐会把第一个{}当做区块语句，计算+{}，得出NaN</span>
<span class="token boolean">true</span><span class="token operator">+</span><span class="token boolean">true</span>
<span class="token comment">// 2</span>
<span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span>
<span class="token comment">// 1[object Object]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="和" tabindex="-1"><a class="header-anchor" href="#和" aria-hidden="true">#</a> == 和 ===</h4><ul><li>== <ul><li>两边值类型相同时，等同于===；</li><li>两边类型不同的时候，先进行类型转换，再比较。</li></ul></li><li>=== <ul><li>不做类型转换，类型不同的一定不等。</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">===</p><ul><li>类型不同:[不相等]</li><li>数值， <ul><li>没有NaN:相等</li><li>有一个是NaN:不相等</li></ul></li><li>字符串，每个位置的字符都一样，那么[相等]</li><li>都是true或者false:相等</li><li>都是null或者undefined:相等</li><li>引用类型比较，进行“指针地址”比较，(都引用同一个对象或函数:[相等])</li></ul></div><div class="custom-container tip"><p class="custom-container-title">==</p><ul><li>如果两个值类型相同，和 === 一样</li><li>如果两个值类型不同，转换成number再比较</li><li>null和undefined比较相等，null和undefined和其他如空字符串，false，0比较，都不等。</li><li>字符串和数值比较，把字符串转换成数值再进行比较。</li><li>任一是布尔值转成0/1再比较</li><li>对象和基本类型比较，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。</li></ul></div><h3 id="二进制和八进制表示法-es6" tabindex="-1"><a class="header-anchor" href="#二进制和八进制表示法-es6" aria-hidden="true">#</a> 二进制和八进制表示法[ES6]</h3><ul><li>用前缀0b（或0B）和0o（或0O）表示。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">0b111110111</span> <span class="token operator">===</span> <span class="token number">503</span> <span class="token comment">// true</span>
<span class="token number">0o767</span> <span class="token operator">===</span> <span class="token number">503</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="number-api-es6-全局方法移到了number对象上" tabindex="-1"><a class="header-anchor" href="#number-api-es6-全局方法移到了number对象上" aria-hidden="true">#</a> Number API[ES6,全局方法移到了Number对象上]</h3><ul><li>Number.toString(radix) <ul><li>将数字转为其它进制</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">其它进制转为十进制</p><p>parseInt(&quot;11&quot;,2)</p></div><div class="custom-container tip"><p class="custom-container-title">二进制计算方法</p><!-- ![二进制计算](../../img/erjinzhi.jpg) --><p>任意几个加起来的和是十进制的数字即可。没用到的用0补位。</p><ul><li>3：2+1 11</li><li>4：4 100</li><li>7：4+2+1 111</li></ul></div><ul><li>Number.isFinite() <ul><li>检查一个数值是否为有限的（finite）</li></ul></li><li>Number.isNaN() <ul><li>检查一个值是否为NaN</li></ul></li><li>Number.parseInt()</li><li>Number.parseFloat()</li><li>Number.isInteger() <ul><li>判断一个数值是否为整数。</li><li>不是数值，返回false</li><li>25 和 25.0 被视为同一个值</li><li>数据精度的要求较高，不建议使用</li></ul></li><li>Number.EPSILON <ul><li>表示一个极小的常量（是 JavaScript 能够表示的最小精度）</li></ul></li><li>Number.isSafeInteger() <ul><li>判断一个整数是否落在这个范围之内。</li><li>Number.MAX_SAFE_INTEGER（范围上限）</li><li>Number.MIN_SAFE_INTEGER（范围下限）</li></ul></li><li>Number.prototype.toFixed(digits) <ul><li>保存到小数点后第几位</li></ul></li></ul><h3 id="math对象" tabindex="-1"><a class="header-anchor" href="#math对象" aria-hidden="true">#</a> Math对象</h3><table><thead><tr><th style="text-align:left;">功能</th><th style="text-align:right;">API</th></tr></thead><tbody><tr><td style="text-align:left;">random()</td><td style="text-align:right;">[0,1)</td></tr><tr><td style="text-align:left;">ceil(x)</td><td style="text-align:right;">向上取整</td></tr><tr><td style="text-align:left;">floor(x)</td><td style="text-align:right;">向下取整</td></tr><tr><td style="text-align:left;">round(x)</td><td style="text-align:right;">四舍五入</td></tr><tr><td style="text-align:left;">abs(x)</td><td style="text-align:right;">绝对值</td></tr><tr><td style="text-align:left;">max(x,y,z,...n)</td><td style="text-align:right;">求最大值</td></tr><tr><td style="text-align:left;">min(x,y,z...n)</td><td style="text-align:right;">求最小值</td></tr></tbody></table><ul><li><p>Math.random()</p><ul><li>常用于清除浏览器缓存，频繁访问一个链接，就在链接后加一个random()</li></ul></li><li><p>Math.pow(x,y)</p><ul><li>返回 x 的 y 次幂。 以下ES6新增：</li></ul></li><li><p>Math.trunc()</p><ul><li>去除一个数的小数部分，返回整数部分</li><li>非数值，内部Number方法将其先转为数值。</li><li>空值和无法截取整数的值，返回NaN</li></ul></li><li><p>Math.sign()</p><ul><li>判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</li><li>参数为正数，返回+1；</li><li>参数为负数，返回-1；</li><li>参数为 0，返回0；</li><li>参数为-0，返回-0;</li><li>其他值，返回NaN。</li></ul></li><li><p>Math.cbrt()</p><ul><li>计算一个数的立方根</li><li>内部也是先使用Number方法将其转为数值</li></ul></li><li><p>Math.fround()</p><ul><li>返回一个数的32位单精度浮点数形式。</li></ul></li><li><p>Math.hypot()</p><ul><li>返回所有参数的平方和的平方根。</li></ul></li><li><p>对数方法</p></li><li><p>双曲函数方法</p></li><li><p>指数运算符（**）</p><ul><li>右结合，多个指数运算符连用时，是从最右边开始计算的。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 相当于 2 ** (3 ** 2)</span>
<span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span>
<span class="token comment">// 512</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h3>`,33),F={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"},M=n("ul",null,[n("li",null,"new带参数比new无参数优先级高")],-1),T=n("li",null,"求余%",-1),D=n("li",null,"按位操作符",-1),R=n("thead",null,[n("tr",null,[n("th",null,"运算符"),n("th",null,"用法"),n("th",null,"描述")])],-1),$={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_AND",target:"_blank",rel:"noopener noreferrer"},B=n("td",null,[n("code",null,"a & b")],-1),J=n("td",null,"对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。",-1),L={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR",target:"_blank",rel:"noopener noreferrer"},W=n("td",null,"`a",-1),U=n("td",null,"b`",-1),Y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR",target:"_blank",rel:"noopener noreferrer"},X=n("td",null,[n("code",null,"a ^ b")],-1),V=n("td",null,"对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。",-1),H={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT",target:"_blank",rel:"noopener noreferrer"},Z=n("td",null,[n("code",null,"~ a")],-1),G=n("td",null,"反转操作数的比特位，即0变成1，1变成0。",-1),Q=o(`<h3 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h3><ul><li><code>parse</code>和<code>stringify</code></li></ul><h2 id="原型和原型链" tabindex="-1"><a class="header-anchor" href="#原型和原型链" aria-hidden="true">#</a> 原型和原型链</h2><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token keyword">this</span><span class="token punctuation">.</span>class <span class="token operator">=</span> <span class="token string">&#39;class-1&#39;</span>
    <span class="token comment">// return this  // 默认有这一行</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>Foo</code>是<code>f</code>的构造函数,有<code>name</code> <code>age</code> <code>class</code>三个属性</p></li><li><p>带<code>new</code>执行时，函数中的<code>this</code>就会变成一个空对象，让程序为其属性赋值，然后最终返回。默认带一个<code>return this</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;beijing&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>创建一个新对象</p></li><li><p><code>this</code>指向这个新对象</p></li><li><p>执行代码，即对<code>this</code>赋值</p></li><li><p>返回<code>this</code></p></li><li><p>创建一个新对象。它继承自foo.prototype</p></li><li><p>执行foo构造函数里的代码。执行时相应的参数被传入，同时this会被指定为这个新实例。new foo等同于new foo()，只能用在不传递任何参数的情况</p></li><li><p>如果构造函数返回了一个对象，那么返回这个对象。否则，返回this</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">new2</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> o<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> k<span class="token operator">=</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> k<span class="token operator">===</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> k
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> o
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>其他</p><ul><li><code>var a = {}</code>是<code>var a = new Object()</code>语法糖</li><li><code>var a = []</code>是<code>var a = new Array()</code>语法糖</li><li><code>function Foo(){...}</code>是<code>var Foo = new Function(...)</code>语法糖</li></ul></li><li><p>判断一个函数是否是一个变量的构造函数</p><ul><li><code>instanceof</code>(原理:一层一层往上，能否对应到<code>xxx.prototype</code>)(判断数组和伪数组：实际应用中只需要判断<code>length</code>属性是否是数字即可)</li><li>constructor===构造函数（更准确）</li></ul></li></ul><h3 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h3><h4 id="显示原型和隐式原型" tabindex="-1"><a class="header-anchor" href="#显示原型和隐式原型" aria-hidden="true">#</a> 显示原型和隐式原型</h4><ul><li>引用类型有一个<code>__proto__</code>(隐式原型)属性，属性值是一个普通的对象</li><li>函数有一个<code>prototype</code>（显示原型）属性，属性值是一个普通的对象</li><li>引用类型的<code>__proto__</code>属性值指向它的构造函数的<code>prototype</code>属性值</li></ul><h3 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h3>`,10),K=n("ul",null,[n("li",null,[a("当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的"),n("code",null,"__proto__"),a("（即它的构造函数的"),n("code",null,"prototype"),a("）中寻找。如果在"),n("code",null,"f.__proto__"),a("中没有找到"),n("code",null,"toString"),a("，那么就继续去"),n("code",null,"f.__proto__.__proto__"),a("中寻找，因为"),n("code",null,"f.__proto__"),a("是一个普通的对象。这样一直往上找，是一个链式的结构，叫做“原型链”。直到找到最上层"),n("code",null,"Object.prototype.__proto__ === null"),a("都没有找到，返回"),n("code",null,"undefined"),a("。")])],-1),nn=o(`<ul><li>如何判断一个这个属性是不是对象本身的属性呢 <ul><li>使用<code>hasOwnProperty</code>，常用在遍历对象的时候</li></ul></li></ul><h3 id="原型链继承" tabindex="-1"><a class="header-anchor" href="#原型链继承" aria-hidden="true">#</a> 原型链继承</h3><ul><li>使用案例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 构造函数</span>
<span class="token keyword">function</span> <span class="token function">DomElement</span><span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>
    <span class="token keyword">var</span> length <span class="token operator">=</span> result<span class="token punctuation">.</span>length
    <span class="token keyword">var</span> i
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> selectorResult<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length
<span class="token punctuation">}</span>
<span class="token comment">// 修改原型</span>
<span class="token class-name">DomElement</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">constructor</span><span class="token operator">:</span> DomElement<span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">forEach</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> i
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> elem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> elem<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">on</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">elem</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用</span>
<span class="token keyword">var</span> $div <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DomElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
$div<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>构造函数继承</li></ul>`,5),sn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第一种，借助构造函数实现继承(这种无法继承parent原型对象上的方法)</span>
<span class="token keyword">function</span> <span class="token function">Parent1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;parent1&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Parent1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Child1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Parent1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// call,apply改变函数执行上下文，即this</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;child1&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 第二种，借助原型链实现继承(这种继承是继承了同一个parent实例，导致修改的也是同一个)</span>
<span class="token keyword">function</span> <span class="token function">Parent2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;parent2&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>play<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Child2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;child2&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Child2</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Parent2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Child2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Child2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s1<span class="token punctuation">.</span>play<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>play<span class="token punctuation">,</span>s2<span class="token punctuation">.</span>play<span class="token punctuation">)</span><span class="token comment">// [1,2,3,4],[1,2,3,4]</span>
<span class="token comment">// 第三种，组合继承方式(组合以上两种，避免了以上两个的问题)(缺点：继承时父级构造函数执行了两遍)</span>
<span class="token keyword">function</span> <span class="token function">Parent3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;parent3&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Child3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Parent3</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;child3&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Child3</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Parent3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 组合继承方式优化1(问题：constructorwei指向Child4)</span>
<span class="token keyword">function</span> <span class="token function">Parent4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;parent4&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Child4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Parent4</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;child4&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Child4</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span><span class="token class-name">Parent4</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token keyword">var</span> s4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Child4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s4<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Parent4</span>
<span class="token comment">// 组合继承方式优化2(最终方案)</span>
<span class="token keyword">function</span> Parent5<span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;parent5&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Child5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">Parent5</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;child5&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Child5</span><span class="token punctuation">.</span>prototype<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Parent5</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 隔离父类和子类的原型对象</span>
<span class="token class-name">Child5</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">=</span>Child5<span class="token punctuation">;</span><span class="token comment">// 覆盖自雷的原型对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="zepto-或其他框架-源码中如何使用原型链" tabindex="-1"><a class="header-anchor" href="#zepto-或其他框架-源码中如何使用原型链" aria-hidden="true">#</a> zepto（或其他框架） 源码中如何使用原型链</h3><ul><li>重写数组_<em>proto</em>_，里面要用到原数组属性的直接=Array.prototype.xxx，其余添加它想要添加的方法。</li></ul><h2 id="作用域和闭包" tabindex="-1"><a class="header-anchor" href="#作用域和闭包" aria-hidden="true">#</a> 作用域和闭包</h2><h3 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h3><ul><li><code>&lt;script&gt;</code>中的变量提升：变量定义，函数声明 <ul><li>在一段 JS 脚本（即一个<code>&lt;script&gt;</code>标签中）执行之前，会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来。变量先暂时赋值为<code>undefined</code>，函数则先声明好可使用。再开始正式执行程序。</li></ul></li><li>函数中的变量提升：变量定义，函数声明，this，arguments <ul><li>一个函数在执行之前，也会创建一个<strong>函数执行上下文</strong>环境，跟<strong>全局上下文</strong>差不多，不过<strong>函数执行上线文</strong>中会多出<code>this</code> <code>arguments</code>和函数的参数。</li></ul></li></ul><h3 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h3>`,7),an=o(`<ul><li>this指向决定于在哪里执行，和在哪里定义无关 <ul><li>全局中this指向window</li><li>构造函数中 <ul><li>指向当前实例对象</li></ul></li><li>其它：指向调用它的对象</li><li>用于<code>call</code> <code>apply</code> <code>bind</code><ul><li>调用时指定this的指向</li></ul></li></ul></li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><ul><li>对象属性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
a<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// this === a</span>
<span class="token keyword">var</span> fn1 <span class="token operator">=</span> a<span class="token punctuation">.</span>fn
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// this === window</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>普通函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// window</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container warning"><p class="custom-container-title">面试题</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;The Window&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">&quot;My Object&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getNameFunc</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
             <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//The Window</span>
object<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//My Object</span>
<span class="token comment">//函数 getNameFunc 内返回一个闭包，因此 this 指向全局对象，所以 this.name 即为定义在全部作用域下的 name（&quot;The Window&quot;）。</span>
<span class="token comment">//函数 getName 内并未返回闭包，因此 this 指向当前对象，所以 this.name 即为当前作用域下的 name（&quot;My Object&quot;）。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>this看执行的时候，自由变量看定义的时候</strong></p></div><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h3><p>没有块级作用域，只有全局作用域和函数作用域。</p><ul><li>全局作用域 <ul><li>如果写了很多行 JS 代码，变量定义都没有用函数包括，就全部都在全局作用域中。容易撞车。</li></ul></li><li>防止全局作用域污染 <ul><li><code>(function(){....})()</code>，jquery等使用匿名函数</li></ul></li></ul><h3 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链" aria-hidden="true">#</a> 作用域链</h3><ul><li>自由变量 <ul><li>当前作用域没有定义的变量，叫做自由变量。</li></ul></li><li>作用域链 <ul><li>自由变量需要向父级作用域寻找。如果父级也没呢？再一层一层向上寻找，直到找到全局作用域。这种一层一层的关系，就是作用域链。</li><li>自由变量按照变量定义时的作用域链</li></ul></li></ul><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3>`,9),tn=o(`<li><p>作用域内部调用作用域外部变量</p><ul><li>函数作为返回值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">200</span>
<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数作为参数传递</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token constant">F2</span><span class="token punctuation">(</span><span class="token parameter">f1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">200</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token constant">F1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token constant">F2</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token comment">//100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),en=n("p",null,"闭包的应用",-1),pn=o(`<ul><li>创造作用域，避免全局污染</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">isFirstLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            _list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 使用</span>
<span class="token keyword">var</span> firstLoad <span class="token operator">=</span> <span class="token function">isFirstLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">firstLoad</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token function">firstLoad</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token function">firstLoad</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),on=o(`<ul><li>创建 10 个 a 标签，点击的时候弹出来对应的序号</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 错误的写法</span>
<span class="token keyword">var</span> i<span class="token punctuation">,</span> a
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
    a<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">&#39;&lt;br&gt;&#39;</span>
    a<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 正确的写法</span>
<span class="token keyword">var</span> i
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
        a<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">&#39;&lt;br&gt;&#39;</span>
        a<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>DocumentFragment</code>优化</li></ul>`,4),ln=n("li",null,[n("p",null,"面试题 案例一:")],-1),cn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">functionaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  varb<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">functioncc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    b<span class="token operator">++</span><span class="token punctuation">;</span> 
    <span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
<span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有子函数里为什么要写 return,?这是因为要在父函数外部调用 。看下面这段代码;</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token comment">//返回 b函数本身内容，不能写成 return b()这样直接执行了 </span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> c<span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">cc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    b<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
<span class="token keyword">var</span> dd<span class="token operator">=</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">dd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token keyword">var</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">cc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    b<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果:11,undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token keyword">var</span> li<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>li<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">js

</span><span class="token template-punctuation string">\`</span></span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>html
<span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">4</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像 上面那些写法都是要么在里面加上括号，直接调用，要么在父函数外面执行。而这里却没 有? 解释:上面的内部的函数被绑定到事件上了 父函数运行，然后把里面的函数返回了，然后返回给绑定的事件上</p><p>这时代码就变成这样: li[i].onclick=function(){ alert(n); } 这是我们常用的写法，很明显，这样就运行了子函数，就会弹出结果。 这个闭包还有第二种写法:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">var</span> li<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span><span class="token punctuation">(</span>vari<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>li<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为要用到循环里的变量，所以用一个闭包把下面的代码包起来，并传给一个形 参 n,调用时传实参 i,这个 i就是 for循环里的 i。</p><h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h2><h3 id="什么是异步" tabindex="-1"><a class="header-anchor" href="#什么是异步" aria-hidden="true">#</a> 什么是异步</h3>`,12),un=o(`<p>异步的场景</p><ul><li>定时 <code>setTimeout</code> <code>setInverval</code></li><li>网络请求，如 <code>ajax</code> <code>&lt;img&gt;</code>加载（常用语打点统计）</li><li>事件绑定</li></ul><h3 id="异步的实现机制-以及对单线程的理解" tabindex="-1"><a class="header-anchor" href="#异步的实现机制-以及对单线程的理解" aria-hidden="true">#</a> 异步的实现机制，以及对单线程的理解</h3><h3 id="异步的问题和解决方案" tabindex="-1"><a class="header-anchor" href="#异步的问题和解决方案" aria-hidden="true">#</a> 异步的问题和解决方案</h3><p>异步遇到的最大的问题</p><ul><li>callback-hell</li><li>易读性差，即书写顺序和执行顺序不一致</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;./data1.json&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span>
    $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;./data2.json&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span>
        $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;./data3.json&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data3<span class="token punctuation">)</span>
            $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;./data4.json&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data4<span class="token punctuation">)</span>
                <span class="token comment">// ...继续嵌套...</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),rn={href:"http://www.cnblogs.com/wangfupeng1988/p/6513070.html",target:"_blank",rel:"noopener noreferrer"},dn={href:"http://www.cnblogs.com/wangfupeng1988/p/6515779.html",target:"_blank",rel:"noopener noreferrer"},kn={href:"http://www.cnblogs.com/wangfupeng1988/p/6515855.html",target:"_blank",rel:"noopener noreferrer"},vn={href:"http://www.cnblogs.com/wangfupeng1988/p/6532713.html",target:"_blank",rel:"noopener noreferrer"},mn={href:"http://www.cnblogs.com/wangfupeng1988/p/6532734.html",target:"_blank",rel:"noopener noreferrer"},bn=o(`<h3 id="同步和异步的区别" tabindex="-1"><a class="header-anchor" href="#同步和异步的区别" aria-hidden="true">#</a> 同步和异步的区别</h3><p>同步会阻塞代码执行，而异步不会。<code>alert</code>是同步，<code>setTimeout</code>是异步</p><h3 id="关于settimeout的笔试题" tabindex="-1"><a class="header-anchor" href="#关于settimeout的笔试题" aria-hidden="true">#</a> 关于<code>setTimeout</code>的笔试题</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 以下代码执行后，打印出来的结果是什么</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该题目的答案是<code>1 3 5 2 4</code></p><h3 id="前端使用异步的场景" tabindex="-1"><a class="header-anchor" href="#前端使用异步的场景" aria-hidden="true">#</a> 前端使用异步的场景</h3><ul><li>setTimeout setInterval</li><li>网络请求</li><li>事件绑定</li></ul><h2 id="内置对象-正则表达式" tabindex="-1"><a class="header-anchor" href="#内置对象-正则表达式" aria-hidden="true">#</a> 内置对象-正则表达式</h2><h3 id="正则对象" tabindex="-1"><a class="header-anchor" href="#正则对象" aria-hidden="true">#</a> 正则对象</h3><ul><li>正则对象可以匹配变量，pattern 正则表达式的文本，flags(g:全局匹配 i:忽略大小写 m：多行)</li><li>三种方式 <ul><li>字面量 <ul><li>/xyz/i</li></ul></li><li>构造函数（返回一个正则表达式字面量） <ul><li>参数是字符串(字符串里需要转义<code>new RegExp(&quot;\\\\w+&quot;)</code>) <ul><li><code>var regex = new RegExp(&#39;xyz&#39;, &#39;i&#39;);</code> 等价于 <code>var regex = /xyz/i;</code></li></ul></li><li>参数是正则表示式 <ul><li><code>var regex = new RegExp(/xyz/i);</code> 等价于 <code>var regex = /xyz/i;</code></li></ul></li><li>参数是正则表示式时第二个参数添加修饰符[ES6] <ul><li><code>new RegExp(/abc/ig, &#39;i&#39;)</code> i覆盖了ig</li></ul></li></ul></li><li>工厂符号 <ul><li>RegExp(&#39;xyz&#39; ,i)</li></ul></li></ul></li><li>注意点 <ul><li>正则表达式里有变量</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>o<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="正则api" tabindex="-1"><a class="header-anchor" href="#正则api" aria-hidden="true">#</a> 正则api:</h3><ul><li>RegExp.prototype.exec(str) <ul><li>在一个指定字符串中执行一个搜索匹配。返回一个结果数组(匹配的第一个字符串)或 null，并改变lastIndex(再次执行exec时开始搜索的位置)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RE_DATE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{4})-(\\d{2})-(\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> matchObj <span class="token operator">=</span> <span class="token constant">RE_DATE</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;1999-12-31&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回结果</span>
<span class="token punctuation">[</span>
    <span class="token comment">// 匹配的第一个字符串</span>
    <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&quot;1999-12-31&quot;</span>
    <span class="token comment">// 所有分组</span>
    <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;1999&quot;</span>
    <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;12&quot;</span>
    <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;31&quot;</span>
    <span class="token comment">// 设置了具名组，并且该组有匹配时的分组捕获</span>
    <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
    <span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">year</span><span class="token operator">:</span><span class="token number">1999</span><span class="token punctuation">,</span>
        <span class="token literal-property property">month</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span>
        <span class="token literal-property property">day</span><span class="token operator">:</span><span class="token number">31</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 匹配到的字符位于原始字符串的基于0的索引值</span>
    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token comment">// 原始字符串	</span>
    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&quot;1999-12-31&quot;</span>
    <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">4</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>RegExp.prototype.test(str) <ul><li>执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 true 或 false。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>RegExp.prototype.unicode[ES6] <ul><li>返回是否设置了u修饰符。</li></ul></li><li>RegExp.prototype.sticky[ES6] <ul><li>返回是否设置了y修饰符</li></ul></li><li>RegExp.prototype.flags[ES6] <ul><li>返回正则表达式的修饰符</li></ul></li></ul><h3 id="字符串的正则方法" tabindex="-1"><a class="header-anchor" href="#字符串的正则方法" aria-hidden="true">#</a> 字符串的正则方法</h3><p>5个方法：match()、replace()、search()、split()、matchAll()</p><h3 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h3><ul><li>默认前一次匹配的结束是下一次匹配的开始</li></ul><h3 id="字符类" tabindex="-1"><a class="header-anchor" href="#字符类" aria-hidden="true">#</a> 字符类</h3><ul><li>[]中括号表示范围 <ul><li><code>[a-zA-Z],[abc],[cf]at</code>,</li><li><code>[0-9]</code></li><li><code>[^a-d]</code> 非a-d的字符</li></ul></li><li>()括号表示里面内容是个整体，优先顺序，|表示或者 <ul><li><code>(cla|pa)ss</code> 表示class或者pass</li></ul></li></ul><h4 id="预定义字符类" tabindex="-1"><a class="header-anchor" href="#预定义字符类" aria-hidden="true">#</a> 预定义字符类</h4><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">.</td><td style="text-align:left;">匹配除\\n换行符外的任何单字符。匹配包括\\n在内的所有字符，使用\`(.</td></tr><tr><td style="text-align:left;">\\</td><td style="text-align:left;">在非特殊字符之前的反斜杠表示下一个字符是特殊字符，不能按照字面理解。在特殊字符之前的反斜杠表示下一个字符不是特殊字符，应该按照字面理解。</td></tr><tr><td style="text-align:left;">\\d</td><td style="text-align:left;">数字字符:[0-9]</td></tr><tr><td style="text-align:left;">\\D</td><td style="text-align:left;">非数字字符:[^0-9]</td></tr><tr><td style="text-align:left;">\\s</td><td style="text-align:left;">空白字符（空格和换行符）:[\\f\\n\\r\\t\\v]</td></tr><tr><td style="text-align:left;">\\S</td><td style="text-align:left;">非空白字符:[^\\s]</td></tr><tr><td style="text-align:left;">\\w</td><td style="text-align:left;">单词字符:[a-zA-Z_0-9]</td></tr><tr><td style="text-align:left;">\\W</td><td style="text-align:left;">非单词字符:[^\\w]</td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">匹配一个换页符</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">匹配一个换行符</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">匹配一个回车符</td></tr><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">匹配一个水平制表符</td></tr><tr><td style="text-align:left;">\\v</td><td style="text-align:left;">匹配一个垂直制表符</td></tr></tbody></table><h3 id="量词" tabindex="-1"><a class="header-anchor" href="#量词" aria-hidden="true">#</a> 量词</h3><ul><li>允许指定匹配出现的次数,以下为贪婪模式：</li></ul><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">X?</td><td style="text-align:left;">匹配X零次或一次</td></tr><tr><td style="text-align:left;">X*</td><td style="text-align:left;">匹配X零次或多次</td></tr><tr><td style="text-align:left;">X+</td><td style="text-align:left;">匹配X一次或多次</td></tr><tr><td style="text-align:left;">X{n,m}</td><td style="text-align:left;">匹配n-m次</td></tr><tr><td style="text-align:left;">X{n,}</td><td style="text-align:left;">匹配X至少n次</td></tr></tbody></table>`,23),gn=["src"],hn=o(`<ul><li>量词模式 <ul><li>贪婪：尽量多的匹配目标字符串，且能够回退</li><li>勉强：尽量少地匹配目标串</li><li>侵占：尽量多地匹配目标串，且不能回退</li></ul></li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>目标串：xfooxxxxxxfoo
贪婪模式：.<span class="token italic"><span class="token punctuation">*</span><span class="token content">foo
匹配一个（</span><span class="token punctuation">*</span></span>f尽量多地全部字符串匹配，然后到foo，没有字符串了，就回退一个，再回退一个，直到回退三个时满足条件，然后就匹配了一个）
勉强模式：<span class="token italic"><span class="token punctuation">*</span><span class="token content">?foo
匹配两个（第一个字符不是f，所以勉强地吞下一个x，然后第二个开始发现是foo，所以第一次匹配是xfoo,然后第二次吞下很多个xxx后发现xxxxxxfoo符合，所以共匹配两次）
侵占模式：.</span><span class="token punctuation">*</span></span>+foo
匹配0个（一次性匹配所有字符，不回退，所以后面的foo没有字符串了）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>目标串：232hjdhfd7474$
贪婪模式：\\w+[a-z]
匹配一个
勉强模式：\\w+?[a-z]
匹配三个
侵占模式：\\w++[a-z]
匹配0个
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="捕获组" tabindex="-1"><a class="header-anchor" href="#捕获组" aria-hidden="true">#</a> 捕获组</h3><ul><li>捕获组：使用括号作为单独的单元来对待的一种方式，可通过程序方便地拿到分组对应的匹配内容</li><li>作用： <ul><li>方便程序获取指定组的匹配</li><li>反向引用时调用</li></ul></li><li>比如在((A)(B(C)))中，按左括号从左到右来数，有四个括号 <ul><li>1:((A)(B(C)))// 表示整个表达式</li><li>2:(A)</li><li>3:(B(C))</li><li>4:(C)</li></ul></li><li>具名组匹配（为每一个组匹配指定一个名字）[ES6] <ul><li>在圆括号内部，模式的头部添加<code>问号 + 尖括号 + 组名（?&lt;year&gt;）</code>，就可以在exec方法返回结果的groups属性上引用该组名。数字序号（matchObj[1]）依然有效。</li><li>如果具名组as没有找到匹配，那么matchObj.groups.as属性值就是undefined，并且as这个键名在groups是始终存在的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RE_OPT_A</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?&lt;as&gt;a+)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> matchObj <span class="token operator">=</span> <span class="token constant">RE_OPT_A</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

matchObj<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>as <span class="token comment">// undefined</span>
<span class="token string">&#39;as&#39;</span> <span class="token keyword">in</span> matchObj<span class="token punctuation">.</span>groups <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>利用具名组解构赋值(直接从匹配结果上为变量赋值)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span><span class="token literal-property property">groups</span><span class="token operator">:</span> <span class="token punctuation">{</span>one<span class="token punctuation">,</span> two<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?&lt;one&gt;.*):(?&lt;two&gt;.*)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;foo:bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
one  <span class="token comment">// foo</span>
two  <span class="token comment">// bar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>利用具名组替换（使用<code>$&lt;组名&gt;</code>引用具名组。） <ul><li>第二个参数是字符串<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// let re = /(?\\&lt;year&gt;\\d{4})-(?\\&lt;month&gt;\\d{2})-(?\\&lt;day&gt;\\d{2})/u;</span>
<span class="token comment">// &#39;2015-01-02&#39;.replace(re, &#39;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#39;)</span>
<span class="token comment">// &#39;02/01/2015&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>第二个参数是函数。具名组匹配新增了最后一个函数参数(具名组构成的一个对象)。函数内部可以直接对这个对象进行解构赋值。</li></ul><div class="language-JS line-numbers-mode" data-ext="JS"><pre class="language-JS"><code>&#39;2015-01-02&#39;.replace(re, (
    matched, // 整个匹配结果 2015-01-02
    capture1, // 第一个组匹配 2015
    capture2, // 第二个组匹配 01
    capture3, // 第三个组匹配 02
    position, // 匹配开始的位置 0
    S, // 原字符串 2015-01-02
    groups // 具名组构成的一个对象 {year, month, day}
) =&gt; {
    let {day, month, year} = groups;
    return \`\${day}/\${month}/\${year}\`;
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>引用（两种引用语法可以同时使用） <ul><li>\\k&lt;组名&gt;</li><li>数字引用（\\1）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">RE_TWICE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?&lt;word&gt;[a-z]+)!\\k&lt;word&gt;!\\1$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token constant">RE_TWICE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;abc!abc!abc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token constant">RE_TWICE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;abc!abc!ab&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="反向引用" tabindex="-1"><a class="header-anchor" href="#反向引用" aria-hidden="true">#</a> 反向引用</h4><ul><li>使用反斜线\\后跟一个数字来表示。数字用来表示需要引用的分组组号</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配两个数字连续出现两次的目标串(如：1212、2424)</span>
<span class="token punctuation">(</span>\\d\\d<span class="token punctuation">)</span>\\<span class="token number">1</span> <span class="token number">12123233</span> 
<span class="token comment">// 匹配一次(\\d\\d表示匹配两个数字，括号括起来表示是一个分组,\\1表示重复这个分组一次)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配html标签</span>
<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">|</span>\\n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">/</span>\\<span class="token number">1</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;vId&quot;</span><span class="token operator">&gt;</span>我知道<span class="token operator">&lt;</span>未来<span class="token operator">&gt;</span>的<span class="token operator">&lt;</span>a<span class="token operator">&gt;</span>路<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>很<span class="token operator">&lt;</span>a<span class="token operator">&gt;</span>不好走<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token comment">// 匹配一次（([a-zA-Z]+)是前面的标签名，.*?勉强模式匹配多个非换行字符的标签属性,(.|\\n)*.?勉强模式匹配标签中间内容，\\1重复前面的标签名）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="非捕获组" tabindex="-1"><a class="header-anchor" href="#非捕获组" aria-hidden="true">#</a> 非捕获组</h4><ul><li>概要 <ul><li>分组括号里第一个是?就是非捕获组(不计算在分组里面)</li><li>好处：不会将匹配到的字符存储在内存中，从而节省内存</li></ul></li><li>分类 <ul><li><code>(?:Pattern)</code></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配industry或者Industries</span>
<span class="token comment">// 这种情况有分组</span>
<span class="token function">industr</span><span class="token punctuation">(</span>y<span class="token operator">|</span>ies<span class="token punctuation">)</span>
<span class="token comment">// 改为没有分组的(节省内存)</span>
<span class="token function">industr</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">:</span>y<span class="token operator">|</span>ies<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="零宽度断言" tabindex="-1"><a class="header-anchor" href="#零宽度断言" aria-hidden="true">#</a> 零宽度断言</h4><ul><li>后顾js不支持</li></ul><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>(?=pattern)</td><td>正向肯定查找(前瞻),后面必须跟着什么</td></tr><tr><td>(?!pattern)</td><td>正向否定查找(前瞻)，后面不能跟着什么</td></tr><tr><td>(?&lt;=pattern)</td><td>反向肯定条件查找(后顾),不捕获</td></tr><tr><td>(?&lt;!pattern)</td><td>反向否定条件查找（后顾）</td></tr></tbody></table><table><thead><tr><th>表达式</th><th>含义</th><th>添加时间</th></tr></thead><tbody><tr><td>x(?=y)</td><td>先行断言，仅匹配被y跟随的x。</td><td></td></tr><tr><td>x(?!y)</td><td>先行否定断言，仅匹配不被y跟随的x。</td><td></td></tr><tr><td>(?&lt;=y)x</td><td>后行断言，仅匹配x在y后面</td><td>ES6</td></tr><tr><td>(?&lt;!y)x</td><td>后行否定断言，仅匹配x不在y后面</td><td>ES6</td></tr></tbody></table><ul><li>例：正则表达式(?&lt;!4)56(?=9) <ul><li>答：文本56前面不能是4，后面必须是9组成，因此5569匹配，4569不匹配</li></ul></li><li>例：提取字符串da12bka3434bdca4343bdca234bm中包含在字符a和b之间的数字，但是这个a之前的字符不能是c，b后面的字符必须是d才能提取。 <ul><li>答：通过添加分组拿到分组内容 [^c]a(\\d+)bd，通过零宽度断言，去掉前后分组，拿到剩下中间的一个分组 (?&lt;=[^c]a)\\d+(?=bd)</li></ul></li></ul><h4 id="模式修政符" tabindex="-1"><a class="header-anchor" href="#模式修政符" aria-hidden="true">#</a> 模式修政符</h4><ul><li>可组合搭配使用</li></ul><table><thead><tr><th>表达式</th><th>含义</th><th>添加时间</th></tr></thead><tbody><tr><td>i</td><td>不区分大小写</td><td></td></tr><tr><td>g</td><td>全局匹配</td><td></td></tr><tr><td>m</td><td>多行修饰符，使^和$匹配每一行的行首和行尾</td><td></td></tr><tr><td>s</td><td>设置为dotAll模式，使.可以匹配任意单个字符</td><td>ES6</td></tr><tr><td>x</td><td></td><td></td></tr><tr><td>e</td><td></td><td></td></tr><tr><td>u</td><td>处理大于\\uFFFF的 Unicode 字符</td><td>ES6</td></tr><tr><td>y</td><td>与g修饰符类似，也是全局匹配，但匹配必须从剩余的第一个位置开始</td><td>ES6</td></tr></tbody></table><h4 id="边界匹配器" tabindex="-1"><a class="header-anchor" href="#边界匹配器" aria-hidden="true">#</a> 边界匹配器</h4><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>行首 (中括号外面表示开头，中括号里面表示取反)</td></tr><tr><td>$</td><td>行尾</td></tr><tr><td>\\b</td><td>匹配一个单词边界</td></tr><tr><td>\\B</td><td>匹配非单词边界</td></tr></tbody></table><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>I say thank you
thank you 
thank you all the same
<span class="token comment">&lt;!-- 查找以thank开头的行：^thank，匹配两项--&gt;</span>
<span class="token comment">&lt;!-- 查找以thank开头以same结尾的行：^thank.*same$，匹配一项 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="regexp-​-1-9" tabindex="-1"><a class="header-anchor" href="#regexp-​-1-9" aria-hidden="true">#</a> RegExp.​$1...$9</h4><ul><li>值为String类型</li><li>返回上一次正则表达式匹配中，第n个子表达式所匹配的文本。（只保存最前面的9个匹配文本。）</li></ul><h4 id="p-和-p" tabindex="-1"><a class="header-anchor" href="#p-和-p" aria-hidden="true">#</a> \\p{...}和\\P{...}</h4><ul><li>允许正则表达式匹配符合 Unicode 某种属性的所有字符</li><li>这两种类只对 Unicode 有效，所以使用的时候一定要加上u修饰符。</li><li>由于 Unicode 的各种属性非常多，所以这种新的类的表达能力非常强。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 匹配所有数字</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\p{Number}+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>
regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;²³¹¼½¾&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;㉛㉜㉝&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token comment">// 匹配所有空格</span>
\\p<span class="token punctuation">{</span>White_Space<span class="token punctuation">}</span>

<span class="token comment">// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w</span>
<span class="token punctuation">[</span>\\p<span class="token punctuation">{</span>Alphabetic<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Mark<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Decimal_Number<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Connector_Punctuation<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Join_Control<span class="token punctuation">}</span><span class="token punctuation">]</span>

<span class="token comment">// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W</span>
<span class="token punctuation">[</span><span class="token operator">^</span>\\p<span class="token punctuation">{</span>Alphabetic<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Mark<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Decimal_Number<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Connector_Punctuation<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Join_Control<span class="token punctuation">}</span><span class="token punctuation">]</span>

<span class="token comment">// 匹配 Emoji</span>
<span class="token operator">/</span>\\p<span class="token punctuation">{</span>Emoji_Modifier_Base<span class="token punctuation">}</span>\\p<span class="token punctuation">{</span>Emoji_Modifier<span class="token punctuation">}</span><span class="token operator">?</span><span class="token operator">|</span>\\p<span class="token punctuation">{</span>Emoji_Presentation<span class="token punctuation">}</span><span class="token operator">|</span>\\p<span class="token punctuation">{</span>Emoji<span class="token punctuation">}</span>\\uFE0F<span class="token operator">/</span>gu

<span class="token comment">// 匹配所有的箭头字符</span>
<span class="token keyword">const</span> regexArrows <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\p{Block=Arrows}+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span>
regexArrows<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="综合实例" tabindex="-1"><a class="header-anchor" href="#综合实例" aria-hidden="true">#</a> 综合实例</h4><ul><li>URL</li></ul><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>/^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]<span class="token italic"><span class="token punctuation">*</span><span class="token content">)</span><span class="token punctuation">*</span></span>\\/?$/
<span class="token comment">&lt;!-- http或者https开头，http和https可有可无，数字或者小写字母或者.或者-有一个及以上，然后.，然后2-6个小写字母或者.的字符串，然后单词或者空格或者.或者-有0个及以上，整个分组0个及以上，然后/有或者没有，结束。 --&gt;</span>
/^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([?=&amp;\\/\\w \\.-]<span class="token italic"><span class="token punctuation">*</span><span class="token content">)</span><span class="token punctuation">*</span></span>\\/?$/
<span class="token comment">&lt;!-- 修改加上?=&amp;后可匹配带参数url --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),fn=o(`<h2 id="内置对象-日期函数" tabindex="-1"><a class="header-anchor" href="#内置对象-日期函数" aria-hidden="true">#</a> 内置对象-日期函数</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 没有参数,表示实例化时刻的日期和时间</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Unix时间戳,它是一个整数值，表示自1970年1月1日00:00:00 UTC（the Unix epoch）以来的毫秒数</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 时间戳字符串,该字符串应该能被 Date.parse() 正确方法识别</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 分别提供日期与时间的每一个成员,没有提供的成员将使用最小可能值（对日期为1，其他为0）。</span>
<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> monthIndex <span class="token punctuation">[</span><span class="token punctuation">,</span> day <span class="token punctuation">[</span><span class="token punctuation">,</span> hours <span class="token punctuation">[</span><span class="token punctuation">,</span> minutes <span class="token punctuation">[</span><span class="token punctuation">,</span> seconds <span class="token punctuation">[</span><span class="token punctuation">,</span> milliseconds<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),yn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回自 1970-1-1 00:00:00  UTC（世界标准时间）至今所经过的毫秒数。</span>
<span class="token keyword">var</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

dt<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回从1970-1-1 00:00:00 UTC（协调世界时）到该日期经过的毫秒数，</span>
dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 年</span>
dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 月（0 - 11）</span>
dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 日（1 - 31）</span>
dt<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 星期(0-6)</span>
dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 小时（0 - 23）</span>
dt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 分钟（0 - 59）</span>
dt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 秒（0 - 59）</span>

dt<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 通过指定从 1970-1-1 00:00:00 UTC 开始经过的毫秒数来设置日期对象的时间，</span>
dt<span class="token punctuation">.</span><span class="token function">setFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置完整年份（四位数年份是四个数字）。</span>
dt<span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置月份。</span>
dt<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置月份中的第几天。</span>
dt<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置小时数。</span>
dt<span class="token punctuation">.</span><span class="token function">setMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置分钟数。</span>
dt<span class="token punctuation">.</span><span class="token function">setSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 设置秒数。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取<code>2017-06-10</code>格式的日期</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token parameter">dt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> year <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> month <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">var</span> date <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 强制类型转换</span>
        month <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> month
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 强制类型转换</span>
        date <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> date
    <span class="token punctuation">}</span>
    <span class="token comment">// 强制类型转换</span>
    <span class="token keyword">return</span> year <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> date
<span class="token punctuation">}</span>
<span class="token keyword">var</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> formatDate <span class="token operator">=</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formatDate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置对象-数组常用-api" tabindex="-1"><a class="header-anchor" href="#内置对象-数组常用-api" aria-hidden="true">#</a> 内置对象-数组常用 API</h2>`,4),xn=o('<table><thead><tr><th style="text-align:left;">功能</th><th style="text-align:right;">API</th><th style="text-align:right;">es6</th></tr></thead><tbody><tr><td style="text-align:left;">合并、切割</td><td style="text-align:right;">concat,join,slice</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">添加</td><td style="text-align:right;">unshift(从头),push(从末尾)</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">删除</td><td style="text-align:right;">shift(从头),pop(从末尾)</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">删除并添加</td><td style="text-align:right;">splice</td><td style="text-align:right;">copy​Within,fill</td></tr><tr><td style="text-align:left;">排序</td><td style="text-align:right;">sort,reverse</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">遍历</td><td style="text-align:right;">map,forEach,reduce</td><td style="text-align:right;">entries,keys,values</td></tr><tr><td style="text-align:left;">筛选</td><td style="text-align:right;">filter,every,some</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">查找</td><td style="text-align:right;">indexOf,last​IndexOf</td><td style="text-align:right;">find,find​Index,includes</td></tr><tr><td style="text-align:left;">拉平</td><td style="text-align:right;">flat,flatMap</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">自带</td><td style="text-align:right;">Array​.isArray</td><td style="text-align:right;">Array.from,Array.of</td></tr></tbody></table><h3 id="数组自带方法" tabindex="-1"><a class="header-anchor" href="#数组自带方法" aria-hidden="true">#</a> 数组自带方法</h3>',2),wn=n("ul",null,[n("li",null,"Array​.isArray()")],-1),jn=n("h4",{id:"es6新增",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#es6新增","aria-hidden":"true"},"#"),a(" ES6新增")],-1),_n=n("ul",null,[n("li",null,[a("Array​.from(object, mapFunction, thisValue) "),n("ul",null,[n("li",null,[a("将非数组转为数组（"),n("code",null,"拥有 length 属性的对象（类数组对象）"),a("和"),n("code",null,"可迭代的对象"),a("）。")]),n("li",null,"第二个参数(类似map方法),用来对每个元素进行处理，将处理后的值放入返回的数组。"),n("li",null,"第三个参数，用来绑定map方法中用到的this。")])])],-1),Nn=o(`<ul><li>Array.of() <ul><li>替代Array()或new Array()</li><li>Array() <ul><li>参数为1个时，会指定数组的长度</li></ul></li><li>Array.of() <ul><li>参数为1个时，依然是一个数组</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// [, , ,]</span>
Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// [1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法" aria-hidden="true">#</a> 实例方法</h3><h4 id="es5" tabindex="-1"><a class="header-anchor" href="#es5" aria-hidden="true">#</a> ES5</h4>`,3),En={class:"custom-container warning"},On=n("p",{class:"custom-container-title"},"合并、切割",-1),Sn=n("ul",null,[n("li",null,"返回被连接数组的一个副本。"),n("li",null,"不改变现有的数组")],-1),An=n("li",null,"Array​.prototype​.join()",-1),qn=n("ul",null,[n("li",null,[a("Array​.prototype​.slice(start,end) "),n("ul",null,[n("li",null,"返回选定的元素。"),n("li",null,"包前不包后"),n("li",null,"start默认为0，负数指倒数开始，end默认到最后，负数指倒数结束")])])],-1),Pn={class:"custom-container warning"},Cn=n("p",{class:"custom-container-title"},"添加",-1),In=n("ul",null,[n("li",null,"Array​.prototype​.unshift()")],-1),zn=n("ul",null,[n("li",null,"Array​.prototype​.push(newelement1,newelement2,....,newelementX)")],-1),Fn={class:"custom-container warning"},Mn=n("p",{class:"custom-container-title"},"删除",-1),Tn=n("ul",null,[n("li",null,"Array​.prototype​.shift()")],-1),Dn=n("ul",null,[n("li",null,"Array​.prototype​.pop()")],-1),Rn={class:"custom-container warning"},$n=n("p",{class:"custom-container-title"},"删除并添加",-1),Bn=n("ul",null,[n("li",null,[a("Array​.prototype​.splice(index,howmany,item1,.....,itemX) "),n("ul",null,[n("li",null,"返回被删除的元素的数组。")])])],-1),Jn={class:"custom-container warning"},Ln=n("p",{class:"custom-container-title"},"排序",-1),Wn=o(`<ul><li>Array​.prototype​.sort() <ul><li>默认从小到大arr.sort()</li><li>改变原数组<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从小到大排序</span>
        <span class="token keyword">return</span> a <span class="token operator">-</span> b
        <span class="token comment">// 从大到小排序</span>
        <span class="token comment">// return b - a</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,1),Un=n("ul",null,[n("li",null,"Array​.prototype​.reverse()")],-1),Yn={class:"custom-container warning"},Xn=n("p",{class:"custom-container-title"},"遍历",-1),Vn=o(`<ul><li>Array​.prototype​.map(function(currentValue,index,arr){},this.Value) <ul><li>对数组每个元素进行操作，创建一个新数组<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&#39;&lt;b&gt;&#39;</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">&#39;&lt;/b&gt;&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,1),Hn=n("ul",null,[n("li",null,[a("Array​.prototype​.for​Each(function (item, index) {}) "),n("ul",null,[n("li",null,"遍历数组的所有元素")])])],-1),Zn=n("ul",null,[n("li",null,[a("Array​.prototype​.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue]) "),n("ul",null,[n("li",null,"对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。"),n("li",null,"第一个函数返回总值和每一项的计算，对数组进行计算后得到结果"),n("li",null,"第二个参数是第一次调用callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。")])])],-1),Gn=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数组去重</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">init<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>init<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> init<span class="token punctuation">[</span>init<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        init<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> init<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1,2,3,4,5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Array​.prototype​.reduce​Right()</li></ul>`,2),Qn=o(`<div class="custom-container warning"><p class="custom-container-title">筛选</p><ul><li>Array​.prototype​.filter(function(currentValue,index,arr){},this.Value) <ul><li>第一个函数返回筛选条件，筛选符合条件的元素</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Array​.prototype​.every() <ul><li>所有的数组元素，都满足一个条件，返回布尔值<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>Array​.prototype​.some() <ul><li>只要有一个满足条件即可，返回布尔值<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>Array​.prototype​.indexOf()</li><li>Array​.prototype​.last​IndexOf()</li></ul></div><div class="custom-container warning"><p class="custom-container-title">转换</p><ul><li>Array​.prototype​.toString() <ul><li>把数组转换为字符串，并返回结果。(数组中的元素之间用逗号分隔)</li></ul></li><li>Array​.prototype​.toLocale​String()</li></ul></div><h4 id="es6新增-1" tabindex="-1"><a class="header-anchor" href="#es6新增-1" aria-hidden="true">#</a> ES6新增</h4>`,3),Kn=o(`<ul><li>Array​.prototype​.copy​Within(target, start = 0, end = this.length) <ul><li>在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。</li><li>会修改当前数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment">// [4, 5, 3, 4, 5]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),ns=o(`<ul><li>Array​.prototype​.find() <ul><li>第一个参数是一个回调函数，所有数组成员依次执行该回调函数，</li><li>找出第一个返回值为true的成员，返回该成员。没有符合条件的，返回undefined。</li><li>第二个参数（回调函数中的this指向）<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,1),ss=o(`<ul><li>Array​.prototype​.find​Index() <ul><li>第一个参数是一个回调函数，所有数组成员依次执行该回调函数，</li><li>返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。</li><li>第二个参数（回调函数中的this指向）<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,1),as=n("pre",null,[n("code",null,`:::tip 和indexOf区别
    - indexOf:找不到NaN
    - find,findIndex:可以借助Object.is方法找到。
:::
`)],-1),ts=o(`<ul><li>Array​.prototype​.fill(value, start, end) <ul><li>使用给定值，填充一个数组。</li><li>start：填充起始位置，可以省略。end：填充结束位置，可以省略，实际结束位置是end-1。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>
a1<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment">// 7,7,7,7,7,7,7,7,7,7,7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,1),es=o(`<ul><li>Array​.prototype​.entries() <ul><li>键值对遍历</li><li>返回一个遍历器对象,可以用for...of循环进行遍历</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Array​.prototype​.keys() <ul><li>键名遍历</li><li>返回一个遍历器对象,可以用for...of循环进行遍历</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Array​.prototype​.values() <ul><li>键值遍历</li><li>返回一个遍历器对象,可以用for...of循环进行遍历</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> elem <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),ps=n("ul",null,[n("li",null,[a("Array​.prototype​.includes() "),n("ul",null,[n("li",null,"返回某个数组是否包含给定的值"),n("li",null,"第二个参数为负数，则表示倒数的位置")]),n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"TIP"),n("ul",null,[n("li",null,"indexOf:-1不直观，NaN误判"),n("li",null,"includes：直观，NaN准确判断")])])])],-1),os=o(`<ul><li>Array​.prototype​.flat() <ul><li>返回一个新数组，将嵌套的数组“拉平”，变成一维的数组</li><li>第一个参数是整数，表示想要拉平的层数，默认为1。(Infinity表示不管多少层都拉平)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span>
<span class="token comment">// [1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Array​.prototype​.flatMap() <ul><li>对原数组的每个成员执行一个函数（相当map），然后对返回值组成的数组执行flat()方法。</li><li>第二个参数绑定遍历函数里面的this。</li><li>flatMap只能展开一层数组。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 相当于 [[[2]], [[4]], [[6]], [[8]]].flat()</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// [[2], [4], [6], [8]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="扩展运算符-数组-es6" tabindex="-1"><a class="header-anchor" href="#扩展运算符-数组-es6" aria-hidden="true">#</a> 扩展运算符（数组）[ES6]</h3><ul><li>三个点（...）,将一个数组转为用逗号分隔的参数序列。</li></ul>`,3),ls=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// 1 2 3</span>
<span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> <span class="token operator">...</span>items</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),cs=n("li",null,[n("p",null,"可以放置表达式。")],-1),is=n("li",null,[n("p",null,"如果扩展运算符后面是一个空数组，则不产生任何效果。")],-1),us=n("li",null,[n("p",null,"只有函数调用时，扩展运算符才可以放在圆括号中，否则会报错。")],-1),rs=n("p",null,"替代函数的 apply 方法",-1),ds=n("ul",null,[n("li",null,"由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。")],-1),ks=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ES5 的写法</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// ES6 的写法</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// 等同于</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),vs=n("p",null,"数组的扩展运算符应用",-1),ms=o(`<ul><li>复制数组（浅拷贝）<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 写法一</span>
<span class="token keyword">const</span> a2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a1<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 写法二</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token operator">...</span>a2<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,1),bs=o(`<ul><li>合并数组（浅拷贝）<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ES5 的合并数组</span>
arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ]</span>

<span class="token comment">// ES6 的合并数组</span>
<span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">,</span> <span class="token operator">...</span>arr3<span class="token punctuation">]</span>
<span class="token comment">// [ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>将字符串转为数组（能够正确识别四个字节的 Unicode 字符。<code>Array.from()</code>也可以）<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">]</span>
<span class="token comment">// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>将任意有Iterator接口的对象转为数组（如node节点集合,set map集合等）</li></ul>`,1),gs=n("pre",null,[n("code",null,":::tip\n- 扩展运算符：转有`可迭代的对象`为数组\n- Array.from：转`拥有 length 属性的对象（类数组对象）`和`可迭代的对象`为数组\n:::\n")],-1),hs=n("h3",{id:"将空位转为undefined-es6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#将空位转为undefined-es6","aria-hidden":"true"},"#"),a(" 将空位转为undefined[ES6]")],-1),fs=n("ul",null,[n("li",null,"ES6 明确将空位转为undefined。")],-1),ys=o('<h2 id="内置对象-字符串常用-api" tabindex="-1"><a class="header-anchor" href="#内置对象-字符串常用-api" aria-hidden="true">#</a> 内置对象-字符串常用 API</h2><table><thead><tr><th style="text-align:left;">功能</th><th style="text-align:right;">ES5 API</th><th style="text-align:right;">ES6 API</th></tr></thead><tbody><tr><td style="text-align:left;">查找</td><td style="text-align:right;">indexOf,lastIndexOf,charAt,</td><td style="text-align:right;">includes,startsWith,endsWith</td></tr><tr><td style="text-align:left;">合并，切割</td><td style="text-align:right;">concat,splite,slice[),subString[)</td><td style="text-align:right;"></td></tr><tr><td style="text-align:left;">匹配</td><td style="text-align:right;">match,replace,search</td><td style="text-align:right;">matchAll</td></tr><tr><td style="text-align:left;">格式化</td><td style="text-align:right;">toLowerCase,toUpperCase,trim,repeat,charCodeAt</td><td style="text-align:right;">padStart,padEnd,trimStart,trimEnd</td></tr></tbody></table><h3 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h3><ul><li>charAt()</li><li>indexOf()</li><li>lastIndexOf()</li><li>includes() <ul><li>返回布尔值，表示是否找到了参数字符串。</li><li>支持第二个参数，表示开始搜索的位置。</li></ul></li><li>startsWith() <ul><li>返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>支持第二个参数，表示开始搜索的位置。</li></ul></li><li>endsWith() <ul><li>返回布尔值，表示参数字符串是否在原字符串的尾部。</li><li>支持第二个参数，表示开始搜索的位置。</li></ul></li></ul>',4),xs=o('<h3 id="合并、切割" tabindex="-1"><a class="header-anchor" href="#合并、切割" aria-hidden="true">#</a> 合并、切割</h3><ul><li>concat()</li><li>split([separator[, limit]]) <ul><li>把一个字符串按分隔符分割成字符串数组</li><li>separator【必需】字符串或正则表达式(如果空字符串(&quot;&quot;)被用作分隔符，则字符串会在每个字符之间分割。如果没有找到或者省略了分隔符，则该数组包含一个由整个字符串组成的元素)</li><li>limit【可选】返回数组的最大长度</li></ul></li><li>slice(start,end) <ul><li>提取字符串的某个部分，并以新的字符串返回被提取的部分。</li></ul></li><li>substring(start,stop) <ul><li>提取字符串中介于两个指定下标之间的字符。返回一个字符串在开始索引到结束索引之间的一个子集</li></ul></li></ul><h3 id="匹配" tabindex="-1"><a class="header-anchor" href="#匹配" aria-hidden="true">#</a> 匹配</h3>',3),ws=o(`<p>str.replace(regexp|substr, newSubStr|function)</p><ul><li>替换</li><li>第二个参数是字符串</li><li>第二个参数是函数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token keyword">let</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token string">&#39;2015-01-02&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> <span class="token punctuation">(</span>
      matched<span class="token punctuation">,</span> <span class="token comment">// 整个匹配结果 2015-01-02</span>
      capture1<span class="token punctuation">,</span> <span class="token comment">// 第一个组匹配 2015</span>
      capture2<span class="token punctuation">,</span> <span class="token comment">// 第二个组匹配 01</span>
      capture3<span class="token punctuation">,</span> <span class="token comment">// 第三个组匹配 02</span>
      position<span class="token punctuation">,</span> <span class="token comment">// 匹配开始的位置 0</span>
      <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token comment">// 原字符串 2015-01-02</span>
      groups <span class="token comment">// 具名组构成的一个对象 {year, month, day}[ES6]</span>
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> <span class="token punctuation">{</span>day<span class="token punctuation">,</span> month<span class="token punctuation">,</span> year<span class="token punctuation">}</span> <span class="token operator">=</span> groups<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>day<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>month<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),js=n("p",null,"str.search(regexp)",-1),_s=n("ul",null,[n("li",null,"对正则表达式和指定字符串进行匹配搜索"),n("li",null,"匹配成功，返回首次匹配项的索引，否则返回-1")],-1),Ns=n("li",null,[n("p",null,"str.match(regexp)"),n("ul",null,[n("li",null,"可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。"),n("li",null,"如果使用g标志，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组。 如果未使用g标志，则仅返回第一个完整匹配及其相关的捕获组（Array）。")])],-1),Es=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;For more information, see Chapter 3.4.5.1&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">see (chapter \\d+(\\.\\d)*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> found <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// logs [ &#39;see Chapter 3.4.5.1&#39;,</span>
<span class="token comment">//        &#39;Chapter 3.4.5.1&#39;,</span>
<span class="token comment">//        &#39;.1&#39;,</span>
<span class="token comment">//        index: 22,</span>
<span class="token comment">//        input: &#39;For more information, see Chapter 3.4.5.1&#39; ]</span>

<span class="token comment">// &#39;see Chapter 3.4.5.1&#39; 是整个匹配。</span>
<span class="token comment">// &#39;Chapter 3.4.5.1&#39; 被&#39;(chapter \\d+(\\.\\d)*)&#39;捕获。</span>
<span class="token comment">// &#39;.1&#39; 是被&#39;(\\.\\d)&#39;捕获的最后一个值。</span>
<span class="token comment">// &#39;index&#39; 属性(22) 是整个匹配从零开始的索引。</span>
<span class="token comment">// &#39;input&#39; 属性是被解析的原始字符串。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> regexp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-E]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> matches_array <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches_array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>str.matchAll() <ul><li>如果一个正则表达式在字符串里面有多个匹配，一般使用g修饰符或y修饰符，在循环里面逐一取出。</li><li>返回一个正则表达式在当前字符串的所有匹配(返回一个遍历器,用for...of循环)</li><li>转数组（...运算符或Array.from方法）</li></ul></li></ul>`,3),Os=o(`<h3 id="格式化" tabindex="-1"><a class="header-anchor" href="#格式化" aria-hidden="true">#</a> 格式化</h3><ul><li>toUpperCase()</li><li>toLowerCase()</li><li>trim()</li><li>trimStart(),trimEnd() <ul><li>trimStart()消除字符串头部的空格</li><li>trimEnd()消除尾部的空格。</li><li>返回新字符串，不修改原始字符串。</li></ul></li><li>str.repeat(count) <ul><li>返回一个新字符串，表示将原字符串重复n次。参数必须为正数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment">// RangeError: 必须为正数</span>
<span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token comment">// &quot;&quot;</span>
<span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment">// &quot;abc&quot;</span>
<span class="token string">&quot;abc&quot;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">// &quot;abcabc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>str.padStart()，str.padEnd() <ul><li>如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。</li><li>如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。</li><li>省略第二个参数，默认使用空格补全长度</li><li>用途 <ul><li>为数值补全指定位数</li><li>提示字符串格式</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;x&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;ababx&#39;</span>
<span class="token string">&#39;x&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;abax&#39;</span>

<span class="token string">&#39;x&#39;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;xabab&#39;</span>
<span class="token string">&#39;x&#39;</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;xaba&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 提示字符串格式</span>
<span class="token number">12</span><span class="token string">&#39;.padStart(10, &#39;</span><span class="token constant">YYYY</span><span class="token operator">-</span><span class="token constant">MM</span><span class="token operator">-</span><span class="token constant">DD</span>&#39;<span class="token punctuation">)</span> <span class="token comment">// &quot;YYYY-MM-12&quot;</span>
<span class="token string">&#39;09-12&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;YYYY-MM-DD&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;YYYY-09-12&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>toString()</li><li>valueOf()</li><li>charCodeAt(index) 单个字符转ascll码的index</li></ul><h2 id="内置对象-对象常用-api" tabindex="-1"><a class="header-anchor" href="#内置对象-对象常用-api" aria-hidden="true">#</a> 内置对象-对象常用 API</h2><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3>`,4),Ss=n("ul",null,[n("li",null,[a("属性名 "),n("ul",null,[n("li",null,"obj.xxx(xxx是变量要用[xxx])")])])],-1),As=o(`<ul><li>属性遍历 <ul><li>for-in<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">300</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> key
<span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul>`,1),qs=n("ul",null,[n("li",null,[n("code",null,"in"),a("运算符 "),n("ul",null,[n("li",null,"如果指定的属性在指定的对象或其原型链中，则in 运算符返回true。")])])],-1),Ps=n("h3",{id:"object-构造函数的方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#object-构造函数的方法","aria-hidden":"true"},"#"),a(" Object 构造函数的方法")],-1),Cs=n("h4",{id:"es5-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#es5-1","aria-hidden":"true"},"#"),a(" ES5")],-1),Is=n("ul",null,[n("li",null,[a("Object.create(proto, [propertiesObject]) "),n("ul",null,[n("li",null,"使用指定的原型对象和属性创建一个新对象。")])])],-1),zs=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"Object.create(null)"),n("p",null,'使用create创建的对象，没有任何属性,把它当作一个非常纯净的map来使用，我们可以自己定义hasOwnProperty、toString方法,完全不必担心会将原型链上的同名方法覆盖掉 在我们使用for..in循环的时候会遍历对象原型链上的属性，使用create(null)就不必再对属性进行检查了 var ns = Object.create(null); if (typeof Object.create !== "function") { Object.create = function (proto) { function F() {} F.prototype = proto; return new F(); }; } console.log(ns) console.log(Object.getPrototypeOf(ns));')],-1),Fs=o("<ul><li>在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。 <ul><li>添加的属性不可修改</li><li>属性无法看到但是可以取到（可以枚举）</li></ul></li><li>描述符 <ul><li>configurable(为true时属性描述符才能被改变，属性也能被删除。默认false)</li><li>enumerable(为true时出现在对象的枚举属性中，默认false)。</li><li>数据描述符和存取描述符二选一 <ul><li>数据描述符 <ul><li>value(任意javascript值,默认undefined)</li><li>writable(为true时value能被修改，默认false)</li></ul></li><li>存取描述符 <ul><li>get <ul><li>给属性提供 getter 的方法，访问属性时被执行</li><li>默认undefined</li><li>没有参数传入，会传入this对象</li></ul></li><li>set <ul><li>给属性提供 setter 的方法，属性值修改时触发</li><li>默认undefined</li><li>一个参数：新值</li></ul></li></ul></li></ul></li></ul></li><li>使用场景(<code>class的实现``vue的MVVM``mobx``装饰器``koa</code>)</li></ul>",1),Ms=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> temp<span class="token punctuation">;</span>
<span class="token comment">// get第一种写法</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> temp
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
      temp<span class="token operator">=</span>val<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// get第二种写法</span>
<span class="token keyword">let</span> obj<span class="token operator">=</span><span class="token punctuation">{</span>
  <span class="token literal-property property">temp</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">get</span> <span class="token constant">PI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>temp
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">set</span> <span class="token constant">PI</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>temp<span class="token operator">=</span>val<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;小明&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ts=o(`<h4 id="es6新增-2" tabindex="-1"><a class="header-anchor" href="#es6新增-2" aria-hidden="true">#</a> ES6新增</h4><ul><li><p>Object.is(val1,val2)</p><ul><li>与严格比较运算符（===）基本一致(区别：<code>+0不等于-0</code>和<code>NaN等于自身</code>。)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参数 <ul><li>value1，第一个需要比较的值。</li><li>value2，第二个需要比较的值。</li></ul></li><li>返回值 <ul><li>表示两个参数是否相同的<code>布尔值</code> 。</li><li>是不是非数</li></ul></li><li>window.isNaN() <ul><li>先把参数转化为数字类型,再判断是不是 NaN</li><li>只要不是数字都满足</li></ul></li><li>Number.isNaN() <ul><li>先判断参数是不是数字类型,不是就返回 false, 是数字类型再进入判断是不是 NaN.</li><li>只有数字中的NaN满足</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Object.assign(target, ...sources)</p><ul><li>合并对象</li><li>只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span>
target <span class="token comment">// {a:1, b:2, c:3}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>注意点 <ul><li>浅拷贝</li><li>同名属性覆盖</li><li>可以处理数组（会把数组视为对象）</li><li>如果复制的是个取值函数，会先求值再复制</li></ul></li><li>用途 <ul><li>为对象添加属性</li><li>为对象添加方法</li><li>克隆对象（只克隆对象自身的值）</li><li>合并对个对象</li><li>为属性指定默认值<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">DEFAULTS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">logLevel</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token literal-property property">outputFormat</span><span class="token operator">:</span> <span class="token string">&#39;html&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">processContent</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">DEFAULTS</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></div></li><li><p>Object.getOwnPropertyDescriptors()</p><ul><li>返回指定对象所有自身属性（非继承属性）的描述对象。</li><li>用途 <ul><li>解决Object.assign()无法正确拷贝get属性和set属性的问题。（配合Object.defineProperties()方法）</li><li>配合Object.create()方法，将对象属性克隆到一个新对象。这属于浅拷贝。</li></ul></li></ul></li><li><p>__proto__属性</p><ul><li>用来读取或设置当前对象的prototype对象。</li><li>最好使用下面的<code>Object.setPrototypeOf()（写操作）</code>、<code>Object.getPrototypeOf()（读操作）</code>、<code>Object.create()（生成操作）</code>代替。</li></ul></li><li><p>Object.setPrototypeOf(object, prototype)</p><ul><li>设置对象的原型（即内部 [[Prototype]] 属性）。</li></ul></li><li><p>Object.getPrototypeOf(obj)</p><ul><li>读取一个对象的原型对象</li></ul></li></ul>`,2),Ds=o(`<ul><li>Object.keys(obj) <ul><li>返回一个包含所有给定对象自身可枚举属性名称的数组。</li><li>for...of循环</li></ul></li><li>Object.values(obj) <ul><li>返回一个包含所有给定对象自身可枚举属性值的数组。</li><li>for...of循环</li></ul></li><li>Object.entries(obj) <ul><li>返回一个包含所有给定对象自身可枚举属性键值的数组。</li><li>for...of循环</li><li>另一个用处：将对象转为真正的Map结构<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">baz</span><span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map <span class="token comment">// Map { foo: &quot;bar&quot;, baz: 42 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>Object.fromEntries() <ul><li>将一个键值对数组转为对象。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// { foo: &quot;bar&quot;, baz: 42 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>用处 <ul><li>将键值对的数据结构还原为对象（特别适合将 Map 结构转为对象）</li><li>配合URLSearchParams对象，将查询字符串转为对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">&#39;foo=bar&amp;baz=qux&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// { foo: &quot;bar&quot;, baz: &quot;qux&quot; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>Object.getOwnPropertySymbols(obj) <ul><li>返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</li></ul></li></ul><h3 id="object-实例的方法" tabindex="-1"><a class="header-anchor" href="#object-实例的方法" aria-hidden="true">#</a> Object 实例的方法</h3><ul><li>Object.prototype.hasOwnProperty() <ul><li>返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的。</li></ul></li><li>Object.prototype.isPrototypeOf() <ul><li>返回一个布尔值，表示指定的对象是否在本对象的原型链中。</li></ul></li><li>Object.prototype.toString() <ul><li>返回对象的字符串表示。</li></ul></li><li>Object.prototype.valueOf() <ul><li>返回指定对象的原始值。</li></ul></li></ul><h2 id="内置对象-function-api" tabindex="-1"><a class="header-anchor" href="#内置对象-function-api" aria-hidden="true">#</a> 内置对象-Function API</h2><ul><li>实例的方法 <ul><li>Function.prototype.apply(thisArg, [argsArray]) <ul><li>在一个对象的上下文中应用另一个对象的方法</li><li>参数能够以数组形式传入。(数组元素将作为单独的参数传给 func 函数)</li></ul></li><li>Function.prototype.call(thisArg, arg1, arg2, ...) <ul><li>在一个对象的上下文中应用另一个对象的方法</li><li>参数能够以列表形式传入。</li></ul></li><li>Function.prototype.bind(thisArg[, arg1[, arg2[, ...]]]) <ul><li>在一个对象的上下文中应用另一个对象的方法</li></ul></li></ul></li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p>call()方法的作用和 apply() 方法区别</p><ul><li>call()方法接受的是<code>参数列表</code></li><li>apply()方法接受的是一个<code>参数数组</code></li></ul></div><div class="custom-container tip"><p class="custom-container-title">注</p><ul><li>利用apply展开数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// expected output: 7</span>
<span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// expected output: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>ES6语法：</p><h3 id="函数参数的默认值-es6" tabindex="-1"><a class="header-anchor" href="#函数参数的默认值-es6" aria-hidden="true">#</a> 函数参数的默认值[ES6]</h3><ul><li>参数默认值是惰性求值的(每次都重新计算默认值表达式的值)</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
p <span class="token comment">// { x: 0, y: 0 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>与解构赋值默认值结合使用</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 写法一</span>
<span class="token keyword">function</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 写法二</span>
<span class="token keyword">function</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>两种写法都对函数的参数设定了默认值，区别是写法一函数参数的默认值是空对象，但是设置了对象解构赋值的默认值；写法二函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值。</li><li>如果传入undefined，将触发该参数等于默认值，null则没有这个效果。</li><li>指定了默认值后，length属性将失真。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">5</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。</li><li>应用 <ul><li>可以指定某一个参数不得省略，如果省略就抛出一个错误</li><li>可以将参数默认值设为undefined，表明这个参数是可以省略的。</li></ul></li></ul><h3 id="rest-参数-es6" tabindex="-1"><a class="header-anchor" href="#rest-参数-es6" aria-hidden="true">#</a> rest 参数[ES6]</h3><ul><li>形式为<code>...变量名</code>，用于获取函数的多余参数</li><li>arguments是类数组，rest参数是真数组</li><li>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</li><li>函数的length属性，不包括 rest 参数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// arguments变量的写法</span>
<span class="token keyword">function</span> <span class="token function">sortNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// rest参数的写法</span>
<span class="token keyword">const</span> <span class="token function-variable function">sortNumbers</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>numbers</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="函数内严格模式" tabindex="-1"><a class="header-anchor" href="#函数内严格模式" aria-hidden="true">#</a> 函数内严格模式</h3><ul><li>规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。</li></ul><h3 id="函数的name属性" tabindex="-1"><a class="header-anchor" href="#函数的name属性" aria-hidden="true">#</a> 函数的name属性</h3><ul><li>函数的name属性，返回该函数的函数名。（ES6才将其写入了标准）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
foo<span class="token punctuation">.</span>name <span class="token comment">// &quot;foo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果将一个匿名函数赋值给一个变量</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// ES5</span>
f<span class="token punctuation">.</span>name <span class="token comment">// &quot;&quot;</span>
<span class="token comment">// ES6</span>
f<span class="token punctuation">.</span>name <span class="token comment">// &quot;f&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h3><ul><li>一个参数可以省略圆括号</li><li>可以省略return和{}，如果返回的是一个对象，要用小括号包裹起来</li><li>用处 <ul><li>简化回调函数<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 正常函数写法</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 箭头函数写法</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>注意点 <ul><li>this看定义</li><li>不可以当作构造函数(就是不可以使用new命令)</li><li>没有arguments,可以用 rest 参数代替。</li></ul></li><li>不适用的场合 <ul><li>定义对象的方法，且该方法内部包括this。</li><li>需要动态this的时候</li><li>函数体很复杂，有许多行，或者函数内部有大量的读写操作，不单纯是为了计算值</li></ul></li><li>嵌套的箭头函数</li></ul><h3 id="尾调用优化" tabindex="-1"><a class="header-anchor" href="#尾调用优化" aria-hidden="true">#</a> 尾调用优化</h3><ul><li>指某个函数的最后一步是调用另一个函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>尾调用优化 <ul><li>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。</li></ul></li><li>尾递归 <ul><li>尾调用自身，就称为尾递归。</li><li>递归非常耗费内存，很容易发生“栈溢出”错误。对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</li><li>ES6规定所有实现必须部署“尾调用优化”。</li></ul></li></ul><h3 id="函数参数的尾逗号" tabindex="-1"><a class="header-anchor" href="#函数参数的尾逗号" aria-hidden="true">#</a> 函数参数的尾逗号</h3><ul><li>允许函数的最后一个参数有尾逗号。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">clownsEverywhere</span><span class="token punctuation">(</span>
  <span class="token parameter">param1<span class="token punctuation">,</span>
  param2<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

<span class="token function">clownsEverywhere</span><span class="token punctuation">(</span>
  <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="delete-操作符" tabindex="-1"><a class="header-anchor" href="#delete-操作符" aria-hidden="true">#</a> delete 操作符</h3><ul><li>delete expression <ul><li>断开引用来间接</li><li>所有情况都返回true，除非属性是一个自己不可配置的属性</li></ul></li></ul>`,36),Rs=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">delete</span> object<span class="token punctuation">.</span>property 
<span class="token keyword">delete</span> object<span class="token punctuation">[</span><span class="token string">&#39;property&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">注意</p><ul><li>如果删除的属性不存在，delete不会起作用，但仍会返回true</li><li>delete操作只会在自身的属性上起作用(不会删除原型链上的属性)</li><li>删除一个数组元素时，数组的长度不受影响</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> trees <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;redwood&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bay&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;cedar&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;oak&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;maple&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> trees<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">in</span> trees<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 这里不会执行</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h2>`,3),$s=o(`<h3 id="写一个能遍历对象和数组的foreach函数" tabindex="-1"><a class="header-anchor" href="#写一个能遍历对象和数组的foreach函数" aria-hidden="true">#</a> 写一个能遍历对象和数组的<code>forEach</code>函数</h3><p>遍历数组使用<code>forEach</code>，而遍历对象使用<code>for in</code>，但是在实际开发中，可以使用一个函数就遍历两者，jquery 就有这样的函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> key
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 准确判断是不是数组</span>
        obj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不是数组就是对象</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            							       		   <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">fn</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token comment">// 注意，这里参数的顺序换了，为了和对象的遍历格式一致</span>
<span class="token function">forEach</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">}</span>
<span class="token function">forEach</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Bs=o(`<h3 id="实现一个深拷贝" tabindex="-1"><a class="header-anchor" href="#实现一个深拷贝" aria-hidden="true">#</a> 实现一个深拷贝</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//递归跳出去的条件，不加的话就相当于死循环</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token operator">!=</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> newObj<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        newObj<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        newObj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//将obj身上的所有属性复制到newObj身上</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//自己调用自己  （递归）</span>
        newObj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Js=o(`<h3 id="settimeout设置为0有什么作用" tabindex="-1"><a class="header-anchor" href="#settimeout设置为0有什么作用" aria-hidden="true">#</a> setTimeout设置为0有什么作用？</h3><ul><li>设为0，实际上浏览器默认是4</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> fuc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> fuc<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fuc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fuc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//1</span>
<span class="token comment">//2</span>
<span class="token comment">//3</span>
<span class="token comment">//3</span>
<span class="token comment">//3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然设置为0秒后执行任务，实际上是大于0秒才执行的。可是这有什么用呢？</p><p>用处就在于我们可以改变任务的执行顺序！因为浏览器会在执行完当前任务队列中的任务，再执行setTimeout队列中积累的的任务。</p><p>通过设置任务在延迟到0s后执行，就能改变任务执行的先后顺序，延迟该任务发生，使之异步执行。</p>`,6);function Ls(r,Ws){const e=c("router-link"),p=c("mark-check"),i=c("mark-box"),u=c("absolute-box"),l=c("ExternalLinkIcon");return k(),v("div",null,[g,n("nav",h,[n("ul",null,[n("li",null,[s(e,{to:"#变量"},{default:t(()=>[a("变量")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#类型"},{default:t(()=>[a("类型")]),_:1})]),n("li",null,[s(e,{to:"#显示类型转换"},{default:t(()=>[a("显示类型转换")]),_:1})]),n("li",null,[s(e,{to:"#隐式类型转换"},{default:t(()=>[a("隐式类型转换")]),_:1})]),n("li",null,[s(e,{to:"#二进制和八进制表示法-es6"},{default:t(()=>[a("二进制和八进制表示法[ES6]")]),_:1})]),n("li",null,[s(e,{to:"#number-api-es6-全局方法移到了number对象上"},{default:t(()=>[a("Number API[ES6,全局方法移到了Number对象上]")]),_:1})]),n("li",null,[s(e,{to:"#math对象"},{default:t(()=>[a("Math对象")]),_:1})]),n("li",null,[s(e,{to:"#运算符"},{default:t(()=>[a("运算符")]),_:1})]),n("li",null,[s(e,{to:"#json"},{default:t(()=>[a("JSON")]),_:1})])])]),n("li",null,[s(e,{to:"#原型和原型链"},{default:t(()=>[a("原型和原型链")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#构造函数"},{default:t(()=>[a("构造函数")]),_:1})]),n("li",null,[s(e,{to:"#原型"},{default:t(()=>[a("原型")]),_:1})]),n("li",null,[s(e,{to:"#原型链"},{default:t(()=>[a("原型链")]),_:1})]),n("li",null,[s(e,{to:"#原型链继承"},{default:t(()=>[a("原型链继承")]),_:1})]),n("li",null,[s(e,{to:"#zepto-或其他框架-源码中如何使用原型链"},{default:t(()=>[a("zepto（或其他框架） 源码中如何使用原型链")]),_:1})])])]),n("li",null,[s(e,{to:"#作用域和闭包"},{default:t(()=>[a("作用域和闭包")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#变量提升"},{default:t(()=>[a("变量提升")]),_:1})]),n("li",null,[s(e,{to:"#this"},{default:t(()=>[a("this")]),_:1})]),n("li",null,[s(e,{to:"#作用域"},{default:t(()=>[a("作用域")]),_:1})]),n("li",null,[s(e,{to:"#作用域链"},{default:t(()=>[a("作用域链")]),_:1})]),n("li",null,[s(e,{to:"#闭包"},{default:t(()=>[a("闭包")]),_:1})])])]),n("li",null,[s(e,{to:"#异步"},{default:t(()=>[a("异步")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#什么是异步"},{default:t(()=>[a("什么是异步")]),_:1})]),n("li",null,[s(e,{to:"#异步的实现机制-以及对单线程的理解"},{default:t(()=>[a("异步的实现机制，以及对单线程的理解")]),_:1})]),n("li",null,[s(e,{to:"#异步的问题和解决方案"},{default:t(()=>[a("异步的问题和解决方案")]),_:1})]),n("li",null,[s(e,{to:"#同步和异步的区别"},{default:t(()=>[a("同步和异步的区别")]),_:1})]),n("li",null,[s(e,{to:"#关于settimeout的笔试题"},{default:t(()=>[a("关于setTimeout的笔试题")]),_:1})]),n("li",null,[s(e,{to:"#前端使用异步的场景"},{default:t(()=>[a("前端使用异步的场景")]),_:1})])])]),n("li",null,[s(e,{to:"#内置对象-正则表达式"},{default:t(()=>[a("内置对象-正则表达式")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#正则对象"},{default:t(()=>[a("正则对象")]),_:1})]),n("li",null,[s(e,{to:"#正则api"},{default:t(()=>[a("正则api:")]),_:1})]),n("li",null,[s(e,{to:"#字符串的正则方法"},{default:t(()=>[a("字符串的正则方法")]),_:1})]),n("li",null,[s(e,{to:"#规则"},{default:t(()=>[a("规则")]),_:1})]),n("li",null,[s(e,{to:"#字符类"},{default:t(()=>[a("字符类")]),_:1})]),n("li",null,[s(e,{to:"#量词"},{default:t(()=>[a("量词")]),_:1})]),n("li",null,[s(e,{to:"#捕获组"},{default:t(()=>[a("捕获组")]),_:1})])])]),n("li",null,[s(e,{to:"#内置对象-日期函数"},{default:t(()=>[a("内置对象-日期函数")]),_:1})]),n("li",null,[s(e,{to:"#内置对象-数组常用-api"},{default:t(()=>[a("内置对象-数组常用 API")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#数组自带方法"},{default:t(()=>[a("数组自带方法")]),_:1})]),n("li",null,[s(e,{to:"#实例方法"},{default:t(()=>[a("实例方法")]),_:1})]),n("li",null,[s(e,{to:"#扩展运算符-数组-es6"},{default:t(()=>[a("扩展运算符（数组）[ES6]")]),_:1})]),n("li",null,[s(e,{to:"#将空位转为undefined-es6"},{default:t(()=>[a("将空位转为undefined[ES6]")]),_:1})])])]),n("li",null,[s(e,{to:"#内置对象-字符串常用-api"},{default:t(()=>[a("内置对象-字符串常用 API")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#查找"},{default:t(()=>[a("查找")]),_:1})]),n("li",null,[s(e,{to:"#合并、切割"},{default:t(()=>[a("合并、切割")]),_:1})]),n("li",null,[s(e,{to:"#匹配"},{default:t(()=>[a("匹配")]),_:1})]),n("li",null,[s(e,{to:"#格式化"},{default:t(()=>[a("格式化")]),_:1})])])]),n("li",null,[s(e,{to:"#内置对象-对象常用-api"},{default:t(()=>[a("内置对象-对象常用 API")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#属性"},{default:t(()=>[a("属性")]),_:1})]),n("li",null,[s(e,{to:"#object-构造函数的方法"},{default:t(()=>[a("Object 构造函数的方法")]),_:1})]),n("li",null,[s(e,{to:"#object-实例的方法"},{default:t(()=>[a("Object 实例的方法")]),_:1})])])]),n("li",null,[s(e,{to:"#内置对象-function-api"},{default:t(()=>[a("内置对象-Function API")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#函数参数的默认值-es6"},{default:t(()=>[a("函数参数的默认值[ES6]")]),_:1})]),n("li",null,[s(e,{to:"#rest-参数-es6"},{default:t(()=>[a("rest 参数[ES6]")]),_:1})]),n("li",null,[s(e,{to:"#函数内严格模式"},{default:t(()=>[a("函数内严格模式")]),_:1})]),n("li",null,[s(e,{to:"#函数的name属性"},{default:t(()=>[a("函数的name属性")]),_:1})]),n("li",null,[s(e,{to:"#箭头函数"},{default:t(()=>[a("箭头函数")]),_:1})]),n("li",null,[s(e,{to:"#尾调用优化"},{default:t(()=>[a("尾调用优化")]),_:1})]),n("li",null,[s(e,{to:"#函数参数的尾逗号"},{default:t(()=>[a("函数参数的尾逗号")]),_:1})]),n("li",null,[s(e,{to:"#delete-操作符"},{default:t(()=>[a("delete 操作符")]),_:1})])])]),n("li",null,[s(e,{to:"#面试题"},{default:t(()=>[a("面试题")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#写一个能遍历对象和数组的foreach函数"},{default:t(()=>[a("写一个能遍历对象和数组的forEach函数")]),_:1})]),n("li",null,[s(e,{to:"#实现一个深拷贝"},{default:t(()=>[a("实现一个深拷贝")]),_:1})]),n("li",null,[s(e,{to:"#settimeout设置为0有什么作用"},{default:t(()=>[a("setTimeout设置为0有什么作用？")]),_:1})])])])])]),f,y,s(p,{id:"zhi"}),x,s(p,{id:"yinyong"}),w,s(p,{id:"typeof"}),j,n("ul",null,[n("li",null,[_,s(p,{id:"zhuanhuan"}),N]),E]),O,n("ul",null,[n("li",null,[a("String函数 "),S,s(p,{id:"stringzhuanhuan"}),A]),q]),P,s(p,{id:"yinshizhuanhuan"}),s(i,null,{default:t(()=>[C]),_:1}),I,s(u,null,{default:t(()=>[a("[] == ![]//true,先布尔转换，再number转换两边都为0")]),_:1}),z,n("ul",null,[n("li",null,[n("a",F,[a("优先级"),s(l)]),M]),T,D]),n("table",null,[R,n("tbody",null,[n("tr",null,[n("td",null,[n("a",$,[a("按位与（ AND）"),s(l)])]),B,J]),n("tr",null,[n("td",null,[n("a",L,[a("按位或（OR）"),s(l)])]),W,U]),n("tr",null,[n("td",null,[n("a",Y,[a("按位异或（XOR）"),s(l)])]),X,V]),n("tr",null,[n("td",null,[n("a",H,[a("按位非（NOT）"),s(l)])]),Z,G])])]),Q,s(p,{id:"prototype"}),s(i,null,{default:t(()=>[K]),_:1}),nn,s(p,{id:"extend"}),sn,s(p,{id:"this"}),an,n("ul",null,[tn,n("li",null,[en,s(p,{id:"bibao1å"}),pn,s(p,{id:"10span"}),on]),ln]),cn,s(p,{id:"yibu"}),un,n("ul",null,[n("li",null,[n("a",rn,[a("深入理解 JavaScript 异步系列（1）——基础"),s(l)])]),n("li",null,[n("a",dn,[a("深入理解 JavaScript 异步系列（2）—— jquery的解决方案"),s(l)])]),n("li",null,[n("a",kn,[a("深入理解 JavaScript 异步系列（3）—— ES6 中的 Promise"),s(l)])]),n("li",null,[n("a",vn,[a("深入理解 JavaScript 异步系列（4）—— Generator"),s(l)])]),n("li",null,[n("a",mn,[a("深入理解 JavaScript 异步系列（5）—— async await"),s(l)])])]),bn,m(" ![量词模式](../../img/三种模式.jpg) "),n("img",{src:r.$withBase("/img/三种模式.jpg"),alt:"foo"},null,8,gn),hn,s(p,{id:"date"}),fn,s(p,{id:"date2"}),yn,s(p,{id:"arrayApi"}),xn,s(p,{id:"isarray"}),wn,jn,s(p,{id:"from"}),_n,s(p,{id:"of"}),Nn,n("div",En,[On,s(p,{id:"concat"}),n("ul",null,[n("li",null,[a("Array​.prototype​.concat(arrayX,arrayX,......,arrayX) "),Sn,s(p,{id:"join"})]),An]),s(p,{id:"slice"}),qn]),n("div",Pn,[Cn,s(p,{id:"unshift"}),In,s(p,{id:"push"}),zn]),n("div",Fn,[Mn,s(p,{id:"shift"}),Tn,s(p,{id:"pop"}),Dn]),n("div",Rn,[$n,s(p,{id:"splice"}),Bn]),n("div",Jn,[Ln,s(p,{id:"sort"}),Wn,s(p,{id:"reverse"}),Un]),n("div",Yn,[Xn,s(p,{id:"map"}),Vn,s(p,{id:"foreach"}),Hn,s(p,{id:"reduce"}),Zn,s(p,{id:"checkQuchong"}),Gn]),s(p,{id:"shaixuan"}),Qn,s(p,{id:"copyWithin"}),Kn,s(p,{id:"find"}),ns,s(p,{id:"findIndex"}),ss,s(p,{id:"indexOfqubie"}),as,s(p,{id:"fill"}),ts,s(p,{id:"entries"}),es,s(p,{id:"includes"}),ps,s(p,{id:"flat"}),os,s(p,{id:"..."}),ls,n("ul",null,[cs,is,us,n("li",null,[rs,ds,s(p,{id:"zhankai"}),s(u,null,{default:t(()=>[a("利用函数apply调用时,参数是数组，调用后转为函数参数序列的特点")]),_:1}),ks]),n("li",null,[vs,s(p,{id:"fuzhishuzu"}),ms])]),s(p,{id:"hebingshuzu"}),bs,s(p,{id:"kuozhanhefromqubie"}),gs,hs,fs,s(p,{id:"stringapi"}),ys,s(p,{id:"stringconcat"}),xs,s(p,{id:"replace"}),n("ul",null,[n("li",null,[ws,s(p,{id:"search"})]),n("li",null,[js,_s,s(p,{id:"match"})]),Ns]),Es,s(p,{id:"stringFormat"}),Os,s(p,{id:"shuxingming"}),Ss,s(p,{id:"shuxingbianli"}),As,s(p,{id:"objectin"}),qs,Ps,Cs,s(p,{id:"create"}),Is,zs,s(p,{id:"defineProperty"}),n("ul",null,[n("li",null,[a("Object.defineProperty() "),Fs,s(p,{id:"getset"}),Ms])]),Ts,s(p,{id:"objectkeys"}),Ds,s(p,{id:"objectdelete"}),Rs,s(p,{id:"view1"}),$s,s(p,{id:"view2"}),Bs,s(p,{id:"view3"}),Js])}const Ys=d(b,[["render",Ls],["__file","index.html.vue"]]);export{Ys as default};
